#include "MemoryCard.h"
#include "Stream.h"
#include "CardUtil.h"
#include "stl/string.h"
#include "gameflow.h"
#include "PlayerState.h"
#include "system.h"
#include "BaseInf.h"
#include "DebugLog.h"

/*
 * --INFO--
 * Address:	........
 * Size:	00009C
 */
DEFINE_ERROR(__LINE__) // Never used in the DLL

/*
 * --INFO--
 * Address:	........
 * Size:	0000F4
 */
DEFINE_PRINT("MemoryCard")

static CARDStat cst;
static CARDMemoryCard CardWorkArea ATTRIBUTE_ALIGN(32);
u8 cardData[0x26000];
static u8 CardStack[0x2000];
static char basecardname[]                            = "Pikmin dataFile";
static char p_icon_palette[0x200] ATTRIBUTE_ALIGN(32) = {
	0x80, 0x00, 0xFF, 0xFF, 0xFE, 0x60, 0xDD, 0xF0, 0xC1, 0x29, 0xBD, 0x4B, 0x94, 0x01, 0xB5, 0x2A, 0x80, 0x00, 0xBD, 0x09, 0xC5, 0xAD,
	0xB1, 0x6B, 0xF6, 0x54, 0x84, 0x00, 0xC9, 0x4C, 0x80, 0x00, 0xDD, 0x6F, 0x98, 0xC6, 0xC2, 0x10, 0xF0, 0x8C, 0xA4, 0xA6, 0xB0, 0x25,
	0xAD, 0x09, 0xD4, 0x8B, 0xF9, 0x73, 0xCA, 0x31, 0xA8, 0x25, 0xFE, 0x79, 0xBD, 0xCF, 0xCE, 0x52, 0xC6, 0x31, 0xB9, 0x6D, 0xFB, 0x1C,
	0xB4, 0x6A, 0xC9, 0x90, 0x98, 0x25, 0x88, 0x02, 0x84, 0x01, 0x80, 0x00, 0xFB, 0xBE, 0xB9, 0xCE, 0xB5, 0x8D, 0xB5, 0x8D, 0x80, 0x00,
	0x9C, 0xC8, 0xA1, 0x08, 0xE7, 0x1A, 0xB9, 0xAF, 0xF3, 0x9D, 0xEF, 0x7C, 0xD2, 0x76, 0xEB, 0x5C, 0xCE, 0x75, 0xF7, 0xBF, 0x98, 0xD0,
	0x80, 0x00, 0x80, 0x01, 0x80, 0x00, 0x80, 0x00, 0xEF, 0x7D, 0xD2, 0x94, 0x98, 0xF5, 0xD6, 0xB7, 0x8C, 0x69, 0x90, 0x8B, 0x90, 0x89,
	0xA1, 0x56, 0x9D, 0x33, 0x94, 0xF3, 0xB1, 0xB7, 0x94, 0xCE, 0x90, 0x85, 0xA9, 0x97, 0x84, 0x45, 0xB1, 0xB0, 0xB6, 0x19, 0x94, 0xC7,
	0xDE, 0xF9, 0x9C, 0xE8, 0x80, 0x23, 0x94, 0xA5, 0x8C, 0x63, 0x8C, 0x64, 0x9C, 0xE8, 0xA5, 0x4B, 0xB5, 0xCF, 0x84, 0x22, 0xBD, 0xF0,
	0xC2, 0xBC, 0x98, 0xE8, 0xA5, 0x2A, 0xA9, 0x6C, 0xB1, 0xAE, 0x9D, 0x09, 0xB9, 0xCF, 0xB9, 0xF0, 0x94, 0xC8, 0xA1, 0x09, 0xA1, 0x2A,
	0xAD, 0x8C, 0x88, 0x42, 0xB1, 0x8D, 0xB6, 0x13, 0xBE, 0x11, 0x80, 0x00, 0xC2, 0x31, 0xC6, 0x32, 0xC6, 0x53, 0x80, 0x00, 0x84, 0x21,
	0x80, 0x00, 0xCE, 0xD3, 0xAD, 0xE9, 0xA1, 0x85, 0xB6, 0x44, 0x99, 0x02, 0xA5, 0x82, 0xC2, 0x2E, 0xB9, 0xCD, 0xDA, 0xD6, 0x8C, 0x81,
	0xB1, 0xAC, 0x88, 0x40, 0xEF, 0x79, 0xEB, 0x57, 0xC6, 0x30, 0x84, 0x20, 0xAD, 0x63, 0xBD, 0xED, 0xB5, 0xAC, 0xAD, 0x6A, 0xE3, 0x18,
	0xCE, 0x73, 0xCA, 0x52, 0xB1, 0x83, 0xF3, 0x64, 0xFB, 0xA5, 0xEF, 0x45, 0xC6, 0x04, 0xF3, 0x67, 0xF3, 0x6D, 0xB1, 0x8B, 0xF7, 0x92,
	0xE2, 0xC4, 0xDA, 0x64, 0x98, 0xA1, 0xDA, 0xB3, 0xB1, 0x42, 0xCE, 0x4D, 0xB9, 0xCA, 0xCE, 0x51, 0xEF, 0x12, 0xF3, 0x54, 0xFB, 0xDE,
	0xD2, 0x70, 0xFF, 0xDB, 0xDE, 0xF5, 0xAD, 0x48, 0xC1, 0xEC, 0xF6, 0x83, 0xEA, 0x43, 0xF6, 0xA4, 0xEE, 0x64, 0xA8, 0xE2, 0xF7, 0x76,
	0xE6, 0xF3, 0xF3, 0x78, 0x90, 0x84, 0xF3, 0x9B, 0xF6, 0x62, 0xF3, 0x32, 0x9C, 0xC5, 0xD2, 0x4E, 0xCA, 0x2D, 0xC9, 0x83, 0xFB, 0x53,
	0xA5, 0x06, 0xC6, 0x0E, 0xF2, 0x66, 0x98, 0xA4, 0xEA, 0xD0, 0xE2, 0xB0, 0xD6, 0x4E, 0xE2, 0xD2, 0xB5, 0x69, 0xDE, 0x91, 0xEB, 0x36,
	0xB9, 0xCD, 0xA5, 0x08, 0xE7, 0x39, 0xFF, 0x99, 0xEE, 0xF3, 0xF3, 0x14, 0xBD, 0xCC, 0xEA, 0x49, 0xE2, 0x6D, 0xEE, 0xB0, 0xDE, 0xF7,
	0xD2, 0x0D, 0xD6, 0x0B, 0xDA, 0x4F, 0xEA, 0xF5, 0xC5, 0x89, 0xC9, 0xCB, 0xA9, 0x07, 0xBD, 0x8A, 0xB1, 0x49, 0xEA, 0x8F, 0xDA, 0x2D,
	0xF2, 0xD2, 0xF7, 0x37, 0xC5, 0xAB, 0xEA, 0x4F, 0xEE, 0xB2, 0xD1, 0xCC, 0xB9, 0x69, 0x9C, 0xE6, 0xA9, 0x4A, 0xFA, 0x4F, 0xDD, 0xCC,
	0xC1, 0x6A, 0xE2, 0x93, 0xC1, 0xCE, 0xC5, 0x06, 0xC5, 0xAC, 0xCE, 0x31, 0x88, 0x00, 0xD2, 0x0F, 0xFF, 0x9B, 0xA4, 0x20, 0xD0, 0x61,
	0xB8, 0x41, 0xF5, 0x26, 0xF0, 0x82, 0xED, 0xCC, 0xC9, 0xAC, 0xEE, 0xD6, 0xB4, 0xE6, 0xB1, 0x08, 0xEC, 0xA4, 0xD1, 0x4A, 0xC5, 0x29,
	0xCD, 0xAD, 0xE2, 0x31, 0xD5, 0xEF, 0xCD, 0xCE, 0xA5, 0x08, 0xB1, 0x8C, 0xA5, 0x29, 0xBD, 0xEF, 0xB5, 0xAD, 0xEB, 0x5A, 0xB9, 0xCE,
	0x80, 0x00, 0x80, 0x00, 0xFF, 0xFF,
};
static char p_icon_data[0x400] = {
	0xAF, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x72, 0x72, 0x72, 0x72,
	0x72, 0x94, 0x72, 0x72, 0x74, 0x72, 0x72, 0x72, 0x72, 0x63, 0x72, 0x73, 0x78, 0x72, 0x72, 0x72, 0x70, 0x66, 0x6F, 0x57, 0x02, 0x02,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x3E, 0x4D, 0x3E, 0x66, 0x59, 0x56,
	0x60, 0x4A, 0x35, 0x35, 0x35, 0x35, 0x35, 0x4D, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x72, 0x72, 0x66, 0xFB, 0x99, 0x35, 0x00, 0x78, 0x72, 0x71, 0x34, 0x33, 0x35, 0x35,
	0x00, 0x08, 0x7E, 0x49, 0x43, 0x56, 0x2D, 0x57, 0x00, 0xE5, 0x00, 0x40, 0x46, 0x00, 0x00, 0x00, 0x27, 0x3E, 0xBD, 0x35, 0x35, 0xA8,
	0xA8, 0x35, 0x35, 0x35, 0x35, 0x30, 0x8C, 0x8B, 0x8B, 0x8C, 0xC5, 0x30, 0x35, 0xAA, 0x87, 0x8B, 0x89, 0x87, 0xA7, 0x83, 0x35, 0xAA,
	0x87, 0x89, 0x89, 0x89, 0x5A, 0x5D, 0x5D, 0x64, 0x00, 0x68, 0x68, 0x02, 0xFB, 0x35, 0x35, 0x83, 0x5A, 0x00, 0x00, 0x02, 0x8C, 0x35,
	0x30, 0x30, 0x30, 0x57, 0x00, 0x02, 0x89, 0x30, 0x35, 0x30, 0x3B, 0x3B, 0xF8, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xE5, 0x06, 0xE7, 0x00, 0x36, 0x41, 0x00, 0x00, 0x00, 0xE7, 0xE5, 0x00, 0x43, 0x49, 0x00, 0x00, 0x00, 0xE6, 0x0D, 0x4F, 0x43,
	0x56, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x49, 0x42, 0x56, 0x00, 0x00, 0x00, 0x34, 0x35, 0x35, 0x30, 0xA6, 0x8C, 0x8B, 0x87, 0x6B, 0x35,
	0x35, 0x35, 0x35, 0x35, 0xA8, 0x83, 0x11, 0x3B, 0x35, 0x35, 0x35, 0x35, 0x3B, 0x59, 0x00, 0x11, 0x9C, 0xBD, 0xC5, 0x57, 0xA7, 0x00,
	0x8C, 0x33, 0x31, 0x31, 0xF7, 0x51, 0x56, 0x02, 0xA8, 0x31, 0x3B, 0x3B, 0x2E, 0x2F, 0x6E, 0x02, 0x2D, 0x4D, 0x35, 0x35, 0x30, 0x3B,
	0x5A, 0x02, 0x00, 0x64, 0x57, 0x3B, 0x30, 0x3B, 0x82, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xE2, 0xE9, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0xE9, 0x02, 0x00, 0x00, 0x00, 0x00, 0x08, 0xE7, 0xE6, 0xE5, 0x00,
	0x3F, 0x42, 0x4F, 0x00, 0x00, 0x00, 0x06, 0x00, 0x40, 0x42, 0x4F, 0x0F, 0x00, 0x00, 0x08, 0x00, 0x46, 0x48, 0x49, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x36, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x8F, 0x86, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x78, 0x89, 0x91, 0x7E, 0x00,
	0x00, 0x00, 0x00, 0x7F, 0x8B, 0x7A, 0x6E, 0x00, 0x00, 0x00, 0xFE, 0x8A, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11,
	0x6B, 0x32, 0x52, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0xE6, 0x02, 0x00, 0x00, 0x00, 0x00, 0xE2, 0xE9, 0xE7,
	0x02, 0x00, 0x00, 0x00, 0x00, 0xE5, 0xE9, 0xED, 0x02, 0x00, 0x00, 0x00, 0x6E, 0xE7, 0xEF, 0x36, 0x00, 0x4F, 0x3D, 0x48, 0x41, 0x00,
	0x00, 0x00, 0x4F, 0x36, 0x42, 0x42, 0x43, 0x49, 0x00, 0x00, 0x44, 0x42, 0x42, 0x4B, 0x4B, 0x48, 0x41, 0x37, 0x3D, 0x43, 0x48, 0x58,
	0x58, 0x48, 0x42, 0x4F, 0x6E, 0x8F, 0x90, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x87, 0x8A, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x91, 0x88,
	0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x88, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x09, 0x48, 0x02, 0x00, 0x00, 0x00, 0x00, 0xE6, 0xF3, 0x08, 0x02, 0x00, 0x00, 0x00,
	0xE5, 0xE9, 0xF3, 0x4D, 0x02, 0x00, 0x08, 0xE7, 0xEF, 0xE9, 0xE6, 0x43, 0x48, 0x3D, 0x42, 0x4B, 0x58, 0x4B, 0x4B, 0x46, 0x33, 0x45,
	0x43, 0x48, 0x4B, 0x00, 0x2E, 0x34, 0x33, 0x45, 0x3D, 0x42, 0x45, 0x33, 0x3E, 0xBA, 0x48, 0x3D, 0x3D, 0x3D, 0x3D, 0x45, 0x9C, 0x8B,
	0x8A, 0x88, 0x8A, 0x26, 0x00, 0x00, 0x00, 0x00, 0x90, 0x88, 0x8A, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x89, 0x88, 0x8F, 0x6E, 0x00, 0x00,
	0x00, 0x00, 0x87, 0x87, 0x87, 0x90, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00,
	0xE7, 0xE9, 0xE9, 0xE9, 0xEA, 0x0B, 0x02, 0xE2, 0xEF, 0xE9, 0xE9, 0xE9, 0xEA, 0xC2, 0x02, 0x14, 0xEC, 0xEC, 0xE8, 0xE9, 0xE8, 0xE8,
	0x02, 0x0B, 0x00, 0x2E, 0xEA, 0xE9, 0xE9, 0xE8, 0x0B, 0x2F, 0x4A, 0x43, 0x3D, 0xBB, 0x87, 0x87, 0x9F, 0x9F, 0xA2, 0x8F, 0x94, 0x8F,
	0x87, 0x87, 0xB2, 0x9F, 0x9F, 0xA9, 0x8F, 0xA4, 0xA4, 0x8B, 0xAA, 0xA1, 0x9F, 0xA9, 0xAA, 0x00, 0x32, 0x8E, 0x87, 0x87, 0x87, 0x87,
	0x89, 0x7A, 0x00, 0x7E, 0x87, 0x87, 0x8B, 0x87, 0x87, 0x90, 0x8A, 0x90, 0x87, 0x87, 0x87, 0x8C, 0x8E, 0x8C, 0xA1, 0xA1, 0x87, 0x87,
	0x87, 0xA8, 0x2B, 0x7C, 0xA1, 0x9F, 0x78, 0x91, 0x91, 0x7A, 0x00, 0x00, 0x00, 0x02, 0xA2, 0xA2, 0xA2, 0x91, 0x00, 0x00, 0x00, 0x02,
	0x9F, 0xA1, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x02, 0xA1, 0x9F, 0x91, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x06, 0xEB, 0xEA, 0xEF, 0xE9,
	0xE9, 0xE9, 0x02, 0x00, 0xE5, 0xE6, 0xE9, 0xE9, 0xE9, 0xE9, 0x02, 0x0F, 0x06, 0xE6, 0xE9, 0xE9, 0xE9, 0xE9, 0xAF, 0x02, 0x02, 0x02,
	0x02, 0x02, 0x02, 0x02, 0xEA, 0xC2, 0x9F, 0x9F, 0xA2, 0x94, 0xA5, 0x8B, 0xE9, 0x09, 0x94, 0xA1, 0xA0, 0x90, 0x8F, 0x87, 0xEF, 0x36,
	0x3D, 0x12, 0x90, 0x8A, 0x90, 0x89, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x87, 0x87, 0x87, 0x8C, 0x9C, 0x8C, 0xA2, 0x9F,
	0x87, 0x87, 0x87, 0x87, 0x89, 0x8F, 0xA1, 0xA1, 0x87, 0x87, 0x87, 0x87, 0x8F, 0x90, 0x90, 0xA3, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
	0x02, 0x02, 0xA1, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xAF,
};

static char o_icon_palette[0x200] = {
	0x80, 0x00, 0xFF, 0xFF, 0xFE, 0x60, 0xDD, 0xF0, 0xC1, 0x29, 0xBD, 0x4B, 0x94, 0x01, 0xB5, 0x2A, 0x80, 0x00, 0xBD, 0x09, 0xC5, 0xAD,
	0xB1, 0x6B, 0xF6, 0x54, 0x84, 0x00, 0xC9, 0x4C, 0x80, 0x00, 0xDD, 0x6F, 0x98, 0xC6, 0xC2, 0x10, 0xF0, 0x8C, 0xA4, 0xA6, 0xB0, 0x25,
	0xAD, 0x09, 0xD4, 0x8B, 0xF9, 0x73, 0xCA, 0x31, 0xA8, 0x25, 0xFE, 0x79, 0xBD, 0xCF, 0xCE, 0x52, 0xC6, 0x31, 0xB9, 0x6D, 0xFB, 0x1C,
	0xB4, 0x6A, 0xC9, 0x90, 0x98, 0x25, 0x88, 0x02, 0x84, 0x01, 0x80, 0x00, 0xFB, 0xBE, 0xB9, 0xCE, 0xB5, 0x8D, 0xB5, 0x8D, 0x80, 0x00,
	0x9C, 0xC8, 0xA1, 0x08, 0xE7, 0x1A, 0xB9, 0xAF, 0xF3, 0x9D, 0xEF, 0x7C, 0xD2, 0x76, 0xEB, 0x5C, 0xCE, 0x75, 0xF7, 0xBF, 0x98, 0xD0,
	0x80, 0x00, 0x80, 0x01, 0x80, 0x00, 0x80, 0x00, 0xEF, 0x7D, 0xD2, 0x94, 0x98, 0xF5, 0xD6, 0xB7, 0x8C, 0x69, 0x90, 0x8B, 0x90, 0x89,
	0xA1, 0x56, 0x9D, 0x33, 0x94, 0xF3, 0xB1, 0xB7, 0x94, 0xCE, 0x90, 0x85, 0xA9, 0x97, 0x84, 0x45, 0xB1, 0xB0, 0xB6, 0x19, 0x94, 0xC7,
	0xDE, 0xF9, 0x9C, 0xE8, 0x80, 0x23, 0x94, 0xA5, 0x8C, 0x63, 0x8C, 0x64, 0x9C, 0xE8, 0xA5, 0x4B, 0xB5, 0xCF, 0x84, 0x22, 0xBD, 0xF0,
	0xC2, 0xBC, 0x98, 0xE8, 0xA5, 0x2A, 0xA9, 0x6C, 0xB1, 0xAE, 0x9D, 0x09, 0xB9, 0xCF, 0xB9, 0xF0, 0x94, 0xC8, 0xA1, 0x09, 0xA1, 0x2A,
	0xAD, 0x8C, 0x88, 0x42, 0xB1, 0x8D, 0xB6, 0x13, 0xBE, 0x11, 0x80, 0x00, 0xC2, 0x31, 0xC6, 0x32, 0xC6, 0x53, 0x80, 0x00, 0x84, 0x21,
	0x80, 0x00, 0xCE, 0xD3, 0xAD, 0xE9, 0xA1, 0x85, 0xB6, 0x44, 0x99, 0x02, 0xA5, 0x82, 0xC2, 0x2E, 0xB9, 0xCD, 0xDA, 0xD6, 0x8C, 0x81,
	0xB1, 0xAC, 0x88, 0x40, 0xEF, 0x79, 0xEB, 0x57, 0xC6, 0x30, 0x84, 0x20, 0xAD, 0x63, 0xBD, 0xED, 0xB5, 0xAC, 0xAD, 0x6A, 0xE3, 0x18,
	0xCE, 0x73, 0xCA, 0x52, 0xB1, 0x83, 0xF3, 0x64, 0xFB, 0xA5, 0xEF, 0x45, 0xC6, 0x04, 0xF3, 0x67, 0xF3, 0x6D, 0xB1, 0x8B, 0xF7, 0x92,
	0xE2, 0xC4, 0xDA, 0x64, 0x98, 0xA1, 0xDA, 0xB3, 0xB1, 0x42, 0xCE, 0x4D, 0xB9, 0xCA, 0xCE, 0x51, 0xEF, 0x12, 0xF3, 0x54, 0xFB, 0xDE,
	0xD2, 0x70, 0xFF, 0xDB, 0xDE, 0xF5, 0xAD, 0x48, 0xC1, 0xEC, 0xF6, 0x83, 0xEA, 0x43, 0xF6, 0xA4, 0xEE, 0x64, 0xA8, 0xE2, 0xF7, 0x76,
	0xE6, 0xF3, 0xF3, 0x78, 0x90, 0x84, 0xF3, 0x9B, 0xF6, 0x62, 0xF3, 0x32, 0x9C, 0xC5, 0xD2, 0x4E, 0xCA, 0x2D, 0xC9, 0x83, 0xFB, 0x53,
	0xA5, 0x06, 0xC6, 0x0E, 0xF2, 0x66, 0x98, 0xA4, 0xEA, 0xD0, 0xE2, 0xB0, 0xD6, 0x4E, 0xE2, 0xD2, 0xB5, 0x69, 0xDE, 0x91, 0xEB, 0x36,
	0xB9, 0xCD, 0xA5, 0x08, 0xE7, 0x39, 0xFF, 0x99, 0xEE, 0xF3, 0xF3, 0x14, 0xBD, 0xCC, 0xEA, 0x49, 0xE2, 0x6D, 0xEE, 0xB0, 0xDE, 0xF7,
	0xD2, 0x0D, 0xD6, 0x0B, 0xDA, 0x4F, 0xEA, 0xF5, 0xC5, 0x89, 0xC9, 0xCB, 0xA9, 0x07, 0xBD, 0x8A, 0xB1, 0x49, 0xEA, 0x8F, 0xDA, 0x2D,
	0xF2, 0xD2, 0xF7, 0x37, 0xC5, 0xAB, 0xEA, 0x4F, 0xEE, 0xB2, 0xD1, 0xCC, 0xB9, 0x69, 0x9C, 0xE6, 0xA9, 0x4A, 0xFA, 0x4F, 0xDD, 0xCC,
	0xC1, 0x6A, 0xE2, 0x93, 0xC1, 0xCE, 0xC5, 0x06, 0xC5, 0xAC, 0xCE, 0x31, 0x88, 0x00, 0xD2, 0x0F, 0xFF, 0x9B, 0xA4, 0x20, 0xD0, 0x61,
	0xB8, 0x41, 0xF5, 0x26, 0xF0, 0x82, 0xED, 0xCC, 0xC9, 0xAC, 0xEE, 0xD6, 0xB4, 0xE6, 0xB1, 0x08, 0xEC, 0xA4, 0xD1, 0x4A, 0xC5, 0x29,
	0xCD, 0xAD, 0xE2, 0x31, 0xD5, 0xEF, 0xCD, 0xCE, 0xA5, 0x08, 0xB1, 0x8C, 0xA5, 0x29, 0xBD, 0xEF, 0xB5, 0xAD, 0xEB, 0x5A, 0xB9, 0xCE,
	0x80, 0x00, 0x80, 0x00, 0xFF, 0xFF,
};

static char o_icon_data[0x400] = {
	0xAF, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x02, 0x02,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x25, 0x23, 0x21, 0x21, 0x21, 0x00, 0x00, 0x00, 0x24, 0x21, 0x17, 0x17, 0x13,
	0x64, 0x11, 0x92, 0x83, 0x23, 0x22, 0x17, 0x18, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xAF, 0x1A, 0xE2, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x13, 0x15, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x18, 0x17, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xA7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xF7,
	0x00, 0x00, 0x00, 0x6D, 0x47, 0x2C, 0x82, 0xC5, 0x6D, 0x47, 0x4E, 0x5A, 0x5B, 0x63, 0x63, 0x2A, 0x96, 0xA8, 0x7D, 0x82, 0x14, 0x17,
	0x13, 0x1B, 0xC5, 0x82, 0xA7, 0x39, 0x23, 0x21, 0x13, 0x0C, 0x7C, 0x76, 0x2D, 0x47, 0x24, 0x1A, 0x17, 0x17, 0x63, 0x63, 0x65, 0x63,
	0x5A, 0x50, 0x51, 0xE2, 0x0C, 0x17, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x02, 0x18, 0x15, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x02, 0x15, 0x0D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x47,
	0x02, 0x00, 0x00, 0x00, 0x00, 0x64, 0x59, 0x5B, 0x02, 0x00, 0x00, 0x00, 0x64, 0x4E, 0x5B, 0x55, 0x02, 0x00, 0x00, 0x64, 0x59, 0x63,
	0x5F, 0x67, 0x62, 0x65, 0x5E, 0x5E, 0x5F, 0x5F, 0x5E, 0x5E, 0x5C, 0x57, 0x6A, 0x6B, 0x6B, 0x6B, 0x6A, 0x69, 0x57, 0x6A, 0x6A, 0x6A,
	0x6A, 0x6A, 0x6A, 0x6A, 0x69, 0x6B, 0x6B, 0x69, 0x67, 0x67, 0x57, 0x5F, 0x55, 0x65, 0x55, 0x55, 0x5C, 0x63, 0x5A, 0x2D, 0x69, 0x5F,
	0x5E, 0x5F, 0x69, 0x6A, 0x57, 0x65, 0x6A, 0x6A, 0x69, 0x84, 0xFB, 0x30, 0x31, 0x83, 0x5F, 0x57, 0x67, 0x77, 0x30, 0x99, 0x99, 0x30,
	0x47, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x5A, 0x59, 0x51, 0x00, 0x00, 0x00, 0x00, 0x02, 0x69, 0x5B, 0x62, 0x52, 0x00, 0x00,
	0x00, 0x02, 0xC5, 0x69, 0x5B, 0x62, 0x52, 0xFE, 0x00, 0x02, 0x02, 0x00, 0x56, 0x4C, 0x5A, 0x55, 0x67, 0x67, 0x02, 0x37, 0x47, 0x5A,
	0x63, 0x5E, 0x69, 0x69, 0x02, 0x56, 0x61, 0x63, 0x5E, 0x57, 0x69, 0x69, 0x02, 0x50, 0x54, 0x65, 0x5F, 0x57, 0x67, 0x67, 0x67, 0x69,
	0x67, 0x28, 0xE0, 0x65, 0x63, 0xF7, 0x57, 0x55, 0x65, 0x07, 0xF0, 0x9D, 0x5A, 0x04, 0x5F, 0x63, 0x54, 0x8D, 0xDF, 0xED, 0xC6, 0xCA,
	0x5C, 0x5B, 0xC1, 0xD4, 0xD4, 0xCF, 0xC0, 0xBA, 0xD7, 0x63, 0x5C, 0xE1, 0xC5, 0x31, 0x31, 0x2E, 0xDF, 0x62, 0xD9, 0xF1, 0xBB, 0x69,
	0x6A, 0x67, 0xDF, 0xD3, 0xDF, 0xCB, 0x7D, 0x55, 0x55, 0x5E, 0xBA, 0x98, 0xC4, 0xAA, 0xAF, 0x9A, 0x5C, 0x55, 0x3C, 0x6A, 0x5E, 0x54,
	0x61, 0x51, 0x00, 0x02, 0x5F, 0x69, 0x67, 0x55, 0x5B, 0x59, 0x6C, 0x02, 0x5E, 0x69, 0x6A, 0x5F, 0x5C, 0x54, 0x51, 0x02, 0x5F, 0x67,
	0x6A, 0x57, 0x5C, 0x65, 0x4E, 0x02, 0x02, 0x4E, 0x5B, 0x5B, 0x55, 0x5F, 0x55, 0x63, 0x02, 0x62, 0x0B, 0xAD, 0x5C, 0x5C, 0x5B, 0xD9,
	0x02, 0x5A, 0x0B, 0xC8, 0xAC, 0x54, 0x54, 0x07, 0x02, 0x5D, 0x63, 0xF5, 0xBF, 0xF7, 0x2D, 0xD7, 0x0B, 0xCB, 0xD0, 0xCF, 0xD5, 0xD1,
	0xC0, 0xD2, 0xCD, 0xD6, 0xD0, 0xCF, 0xCF, 0xC4, 0xD1, 0xAA, 0xE0, 0xD7, 0xAB, 0xAB, 0xD8, 0xC6, 0xB4, 0xBF, 0xEB, 0xDC, 0x07, 0xDC,
	0xD3, 0xC8, 0xB4, 0x97, 0x98, 0x98, 0xAA, 0xAA, 0x97, 0xAA, 0xB4, 0xB1, 0x98, 0x98, 0x98, 0xAA, 0xAA, 0xAA, 0xAA, 0xBF, 0x98, 0xA6,
	0x8D, 0xBC, 0xBC, 0xB8, 0xB4, 0xD1, 0x7C, 0xFB, 0x1D, 0x57, 0xBB, 0x95, 0xB4, 0xC4, 0x55, 0x57, 0x69, 0x5E, 0x5B, 0x63, 0x5A, 0x02,
	0xB1, 0x5C, 0x5E, 0x65, 0xAD, 0xBB, 0x62, 0x02, 0xC4, 0x81, 0x5B, 0x9E, 0xC4, 0xC1, 0x61, 0x02, 0xC4, 0xAD, 0xD9, 0xC8, 0xB4, 0x8D,
	0x5D, 0x02, 0x02, 0x4E, 0x63, 0x0A, 0xBF, 0xAC, 0x14, 0x07, 0x02, 0x4C, 0x63, 0x1F, 0xDD, 0xC9, 0xEE, 0x07, 0x02, 0x52, 0x54, 0x1F,
	0xE3, 0xC9, 0xE0, 0x05, 0x02, 0x38, 0x62, 0x2A, 0x22, 0xC9, 0xF5, 0x05, 0xE0, 0xEB, 0xC7, 0xD4, 0xCF, 0xCF, 0xD4, 0xD5, 0xE0, 0xF5,
	0x03, 0xCF, 0xDB, 0xF0, 0xEA, 0xDA, 0x0A, 0xF4, 0xF3, 0xF2, 0x09, 0xF0, 0xEA, 0xD4, 0xF2, 0xF4, 0xF3, 0x0E, 0x09, 0x10, 0x10, 0x03,
	0xBF, 0xD5, 0xC9, 0xFB, 0x7B, 0x97, 0xC4, 0xCF, 0xC0, 0xBA, 0xD5, 0xD4, 0xB5, 0xB4, 0xC4, 0xB5, 0xD5, 0xD4, 0xD4, 0xEA, 0xDB, 0xC3,
	0xCF, 0xC3, 0xF3, 0xDB, 0xF0, 0xF0, 0xF1, 0xD6, 0xC3, 0xC6, 0xC3, 0xD0, 0xCD, 0xA5, 0xB9, 0x82, 0x53, 0x02, 0xB6, 0xC7, 0xC6, 0xA5,
	0xCB, 0x62, 0x4C, 0x02, 0xC6, 0xCB, 0xC6, 0xB6, 0xB8, 0x4E, 0x47, 0x02, 0xD3, 0xCD, 0xE0, 0xD3, 0xF8, 0x60, 0x56, 0x02, 0x02, 0x00,
	0x47, 0x63, 0x0A, 0xDD, 0xD0, 0x0A, 0x02, 0x00, 0x6C, 0x53, 0x2A, 0xF5, 0xF4, 0x0A, 0x02, 0x00, 0x00, 0x3A, 0x53, 0x1F, 0xE0, 0x1F,
	0x02, 0x00, 0x00, 0x00, 0x3A, 0x50, 0x62, 0x5A, 0xF5, 0xF4, 0xF3, 0xF4, 0x0E, 0xF1, 0xF0, 0xF0, 0xF5, 0xF5, 0x03, 0x03, 0x0E, 0x09,
	0x09, 0xF1, 0x0A, 0xF2, 0xE3, 0xF4, 0xF4, 0x0E, 0x04, 0x09, 0x16, 0x05, 0xEB, 0xF5, 0xF4, 0xF4, 0xF5, 0xEB, 0xF0, 0xF1, 0xF1, 0xED,
	0xCC, 0xCA, 0xCB, 0xCA, 0x04, 0x09, 0xED, 0x14, 0xEE, 0xCB, 0xCA, 0x9D, 0x09, 0xEE, 0xEE, 0xD7, 0xCB, 0xCD, 0x9D, 0xCC, 0xE0, 0xD3,
	0xD3, 0xE0, 0xDC, 0xB8, 0xCE, 0xD9, 0xCE, 0xCE, 0xD7, 0xD9, 0x59, 0x47, 0x00, 0x02, 0xB0, 0x07, 0x16, 0xD8, 0x50, 0x38, 0x00, 0x02,
	0xBC, 0x05, 0xBC, 0x50, 0x38, 0x00, 0x00, 0x02, 0x5A, 0x53, 0x47, 0x68, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x56, 0x47, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xAF, 0x02, 0x02, 0x02,
	0x02, 0x02, 0x02, 0x02, 0x60, 0x2D, 0x16, 0x05, 0xDC, 0xEB, 0xF2, 0xF2, 0x00, 0x64, 0xD8, 0xD9, 0x0A, 0xC1, 0x0A, 0xC1, 0xA7, 0x9A,
	0x98, 0x84, 0x84, 0x77, 0xC5, 0xC5, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xEB, 0xEB, 0xE0, 0xD7, 0xCC, 0xF6, 0x2D, 0x4C,
	0xC1, 0xC1, 0xC1, 0xBB, 0xD9, 0x47, 0x64, 0x39, 0xC5, 0x83, 0x83, 0x77, 0x75, 0xA7, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
	0x02, 0x02, 0x52, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xAF,
};

static char p_card_v_palette[0x200] = {
	0xFF, 0xFF, 0xFF, 0xE0, 0xFC, 0x1F, 0xFC, 0x00, 0x83, 0xFF, 0x83, 0xE0, 0x80, 0x1F, 0x80, 0x00, 0x80, 0xC0, 0x81, 0x00, 0x80, 0x40,
	0x94, 0x00, 0xA0, 0x44, 0x98, 0x88, 0xA5, 0x29, 0xA4, 0xF4, 0x80, 0x0C, 0x80, 0x02, 0x80, 0x05, 0xB9, 0xD5, 0xA9, 0x4C, 0x88, 0x42,
	0xDE, 0xF8, 0xFB, 0xDF, 0xE7, 0x3A, 0xF7, 0xBE, 0xEF, 0x7C, 0x94, 0xD3, 0x80, 0x29, 0x9D, 0x14, 0x90, 0xAD, 0xA5, 0x76, 0x88, 0x46,
	0xB1, 0xD8, 0x88, 0x8C, 0xBE, 0x3A, 0xC2, 0x7A, 0xA9, 0x8E, 0xEF, 0x9D, 0x94, 0xA5, 0x99, 0x49, 0x82, 0x20, 0x81, 0xC0, 0x81, 0x80,
	0x81, 0x40, 0x80, 0x80, 0x80, 0x40, 0x80, 0x20, 0x88, 0xC2, 0x88, 0x82, 0x84, 0x41, 0x95, 0x25, 0xA5, 0xA9, 0xB5, 0xCD, 0x89, 0xC0,
	0x89, 0x80, 0x8D, 0x81, 0x8D, 0x61, 0x89, 0x40, 0x96, 0x02, 0x9A, 0x43, 0x91, 0x82, 0x9A, 0x03, 0x99, 0xA4, 0x89, 0x00, 0x96, 0x40,
	0x9A, 0x62, 0x9E, 0x82, 0x9A, 0x42, 0x95, 0xE1, 0xA2, 0xE3, 0x91, 0x42, 0x91, 0xC0, 0x96, 0x20, 0x9E, 0xE1, 0xA2, 0xE2, 0x9A, 0x22,
	0x9A, 0x02, 0x9A, 0x22, 0xA2, 0xC3, 0xA2, 0xA3, 0xA2, 0x83, 0x9E, 0x43, 0x9A, 0x60, 0xA2, 0xC2, 0x9E, 0x61, 0xA7, 0x02, 0x9E, 0x42,
	0xA6, 0xE3, 0xAB, 0x04, 0xA6, 0xC4, 0x9E, 0x03, 0xA2, 0x63, 0xD7, 0x14, 0x88, 0xC0, 0x88, 0xC0, 0x9A, 0x80, 0x91, 0x80, 0xA6, 0xE2,
	0xA2, 0xA2, 0xA2, 0x82, 0xAB, 0x23, 0x9E, 0x22, 0xAB, 0x03, 0xA6, 0xC3, 0x99, 0xC2, 0xA7, 0x20, 0xA2, 0xA1, 0xAB, 0x22, 0xA6, 0xC2,
	0xAB, 0x62, 0x9E, 0x02, 0xAF, 0x23, 0xA6, 0xA3, 0xAF, 0x44, 0xA2, 0x43, 0x91, 0x02, 0xAB, 0x60, 0xA2, 0xE0, 0x9A, 0x20, 0xAB, 0x01,
	0xA6, 0xA2, 0xA2, 0x62, 0xA2, 0x42, 0x91, 0x21, 0xAF, 0x03, 0xAA, 0x83, 0xA6, 0x43, 0xA2, 0x24, 0xAB, 0x20, 0x91, 0x40, 0xAF, 0x21,
	0xB7, 0x82, 0xA6, 0x82, 0xAA, 0xE2, 0xA2, 0x22, 0x8C, 0xC1, 0x99, 0x82, 0xB6, 0x6A, 0x99, 0xC0, 0xB3, 0x62, 0xA6, 0x62, 0xB7, 0xA0,
	0xB3, 0x60, 0xA6, 0x60, 0xA2, 0x21, 0xAA, 0xA2, 0xA5, 0xC5, 0xCA, 0x71, 0xA2, 0x01, 0xBF, 0xC2, 0xBF, 0x83, 0xB3, 0x22, 0x99, 0x42,
	0x88, 0x80, 0xBB, 0xA0, 0xBF, 0xE0, 0xBB, 0x62, 0xAA, 0x62, 0xA2, 0x20, 0xA2, 0x00, 0x99, 0x80, 0x91, 0x00, 0x91, 0x00, 0x88, 0x80,
	0xB7, 0x20, 0xAE, 0x81, 0xAA, 0x61, 0xA6, 0x21, 0xB2, 0xE2, 0xA1, 0xE2, 0x90, 0xC2, 0xBB, 0x60, 0xBB, 0x22, 0xA1, 0xE0, 0xB6, 0xC0,
	0x99, 0x40, 0xB2, 0xA2, 0xAA, 0x22, 0xB6, 0xA1, 0xBF, 0x01, 0xC7, 0x62, 0xBE, 0xE2, 0xA1, 0xA2, 0xB6, 0x64, 0xAA, 0x20, 0xBE, 0xE0,
	0xCF, 0x81, 0x8C, 0x81, 0x88, 0x61, 0xC3, 0x20, 0xCB, 0x62, 0xC7, 0x22, 0xBA, 0x82, 0xA9, 0xE2, 0x99, 0x02, 0x90, 0xC0, 0x88, 0x60,
	0xCB, 0x60, 0xA1, 0x80, 0xA1, 0x44, 0xA9, 0xE0, 0xD7, 0xA1, 0xB2, 0x21, 0xCB, 0x20, 0xCF, 0x22, 0x90, 0xA1, 0x99, 0x00, 0xD3, 0x41,
	0xC2, 0xA1, 0xA9, 0x82, 0xA9, 0xA0, 0xB1, 0xA9, 0xD2, 0x8B, 0xA5, 0x21, 0x98, 0xC0, 0x90, 0x80, 0x88, 0x40, 0x84, 0x20, 0xB9, 0xA1,
	0x98, 0xC2, 0x88, 0x41, 0xEF, 0x77, 0xEF, 0x42, 0xF3, 0x63, 0xFB, 0xA5, 0xF3, 0x65, 0xEF, 0x25, 0xC5, 0xE1, 0xDA, 0xA4, 0xF3, 0x6C,
	0xD2, 0x41, 0xC1, 0xC4, 0xF3, 0x71, 0xB1, 0x20, 0xA4, 0xC0, 0xF6, 0x84, 0xF3, 0x79, 0x90, 0x40, 0xB4, 0xA0, 0xB1, 0x49, 0xEE, 0xF5,
	0xF6, 0x0E, 0xF1, 0x26, 0xF5, 0x69, 0xA4, 0x00, 0xF0, 0x61, 0xD4, 0x61, 0xE8, 0x82, 0xF4, 0x82, 0xBC, 0x20, 0xE8, 0xA4, 0xF4, 0xE6,
	0x88, 0x00, 0xA0, 0xC6, 0xFF, 0xFF,
};

static char p_card_v_data[0xC00] = {
	0x07, 0x07, 0x07, 0x0E, 0x14, 0x35, 0x27, 0x07, 0x07, 0x07, 0x0E, 0x18, 0x1A, 0x35, 0x35, 0x14, 0x07, 0x27, 0x18, 0x00, 0x00, 0x16,
	0x15, 0xF0, 0x07, 0x35, 0x17, 0x17, 0x00, 0x18, 0x0E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0A, 0x74, 0x99,
	0x89, 0x74, 0x0E, 0x0E, 0x27, 0xC2, 0xB8, 0xD5, 0x5D, 0x5D, 0x26, 0x19, 0xD4, 0xB8, 0xB8, 0x5D, 0x17, 0x17, 0x19, 0xDE, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xDD, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x26, 0x25, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0xE6, 0xDE, 0x1A, 0x94, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xA4, 0xA2, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x94, 0x1A, 0x17, 0x00, 0x18, 0x0E, 0x15, 0x07, 0x34, 0x5D, 0x17,
	0x00, 0x16, 0x27, 0x15, 0x07, 0x33, 0x8A, 0x94, 0x5D, 0x35, 0x11, 0x07, 0x07, 0x08, 0x28, 0x80, 0x3F, 0x31, 0x07, 0x07, 0xD4, 0xB8,
	0xB8, 0xB8, 0x8A, 0x5D, 0x19, 0xE3, 0xDC, 0xC2, 0xB8, 0xB8, 0xC7, 0x5D, 0x17, 0xED, 0x07, 0xEA, 0xB7, 0xC4, 0x07, 0x0E, 0x17, 0x17,
	0x07, 0xF7, 0xFD, 0x07, 0x07, 0x07, 0x27, 0xD5, 0xDF, 0xE2, 0x19, 0x17, 0x13, 0x07, 0xD9, 0x07, 0xE9, 0xE9, 0x19, 0x1A, 0xF0, 0x0A,
	0xA5, 0xC7, 0x16, 0x0E, 0x16, 0x17, 0x16, 0x9F, 0x8E, 0x9B, 0xD2, 0x07, 0x15, 0x35, 0x5D, 0x6E, 0x6A, 0x8F, 0x07, 0x07, 0x07, 0x81,
	0x8E, 0x81, 0x77, 0x0A, 0xA2, 0xA1, 0xA1, 0x76, 0x81, 0x8F, 0x75, 0x53, 0x6A, 0x6A, 0x76, 0x76, 0x60, 0x6A, 0x6A, 0x6A, 0x60, 0x41,
	0x53, 0x53, 0x53, 0x60, 0x6B, 0x76, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0A, 0x07, 0x07, 0x07, 0x07, 0xA2, 0x07, 0x07,
	0xA1, 0x07, 0x07, 0x07, 0x82, 0x6A, 0x82, 0x07, 0x76, 0x0A, 0x07, 0xD9, 0x53, 0x6A, 0x81, 0x07, 0x07, 0x07, 0xA4, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0xA2, 0x9B, 0x9F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x61, 0x8E, 0x9C, 0xA1, 0x07, 0x07, 0x07, 0x07, 0x77, 0x6A, 0x9B,
	0x81, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x0A, 0x30, 0x47, 0xA2, 0x07, 0x07, 0x0A, 0x47, 0x42, 0x43, 0x6C, 0x92, 0x07, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x47, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x74, 0x46, 0x42, 0xA4, 0x07, 0x07, 0x07, 0x07, 0x42, 0x50, 0x4F, 0x4C, 0x30, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD9, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD9, 0x4E, 0x86, 0x89, 0x07, 0x07, 0x07, 0x5E, 0x4B,
	0x4B, 0x78, 0x84, 0xA1, 0x07, 0xA4, 0x86, 0x6A, 0x43, 0x63, 0x97, 0x81, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x0A, 0xAE, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x4E, 0x9C, 0xC7, 0x07, 0xC4, 0x07, 0x07, 0x0A, 0x4B, 0x8E, 0xAC, 0x07, 0xA2,
	0xC4, 0xA4, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x8F, 0x9B, 0xC4, 0x07, 0x07, 0x07, 0x07, 0x07, 0x8E, 0x9C, 0x86, 0x0A, 0x07, 0x07,
	0x07, 0x07, 0x75, 0x8C, 0x8C, 0x4E, 0x47, 0x74, 0x07, 0x07, 0x07, 0x07, 0x07, 0x5E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0A, 0x6C,
	0x92, 0xD9, 0x07, 0x07, 0x07, 0x07, 0xA2, 0x6C, 0x8C, 0x7A, 0x07, 0x07, 0x07, 0x07, 0x89, 0x43, 0x7D, 0x59, 0x30, 0x07, 0x07, 0x07,
	0x20, 0x28, 0x2E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x20, 0x1F, 0x11, 0x07, 0x07, 0x07, 0x07, 0x11, 0x1E, 0x1F, 0x1E, 0x07, 0x07, 0xFD,
	0x07, 0x1E, 0x1F, 0x24, 0x23, 0x22, 0x07, 0xF7, 0x0B, 0xF8, 0xFD, 0x07, 0x07, 0x07, 0x07, 0xE7, 0xF5, 0xFB, 0xFD, 0x07, 0x07, 0x07,
	0x07, 0xE3, 0xF7, 0xF9, 0xFA, 0x07, 0x07, 0x07, 0xDB, 0xE1, 0xF9, 0xF4, 0xF8, 0xF7, 0xD6, 0xE4, 0xE1, 0xE2, 0xD6, 0x07, 0x07, 0x11,
	0x82, 0x4A, 0x6B, 0x83, 0xEA, 0x07, 0x07, 0x07, 0x3D, 0x53, 0x43, 0x56, 0xE5, 0xD9, 0x07, 0x07, 0x3D, 0x41, 0x55, 0x56, 0xE1, 0xE5,
	0xD7, 0xD6, 0xE4, 0xB2, 0x42, 0x4F, 0x60, 0x60, 0x76, 0x6C, 0x6A, 0x49, 0x48, 0x60, 0x55, 0x49, 0x4B, 0x62, 0x77, 0x3A, 0x37, 0x49,
	0x57, 0x82, 0x47, 0x88, 0x2E, 0x40, 0x37, 0x49, 0x7A, 0x07, 0x07, 0x07, 0x07, 0x69, 0x43, 0x42, 0x6A, 0x40, 0x07, 0x82, 0x60, 0x76,
	0x8E, 0xA3, 0x78, 0x61, 0x07, 0x69, 0x49, 0x6B, 0x8F, 0x8B, 0x60, 0x4C, 0x07, 0x4C, 0x48, 0x60, 0x75, 0x61, 0x53, 0x64, 0x0A, 0x45,
	0x53, 0x60, 0x56, 0x61, 0x07, 0x60, 0x60, 0x83, 0x81, 0x40, 0x07, 0x07, 0x0A, 0x49, 0x49, 0x76, 0x78, 0x61, 0x07, 0x3D, 0xD9, 0x53,
	0x49, 0x60, 0x62, 0x69, 0x5E, 0x77, 0x07, 0x69, 0x77, 0x53, 0x62, 0x87, 0x3D, 0x45, 0x69, 0x44, 0x49, 0x63, 0x9B, 0xA1, 0x07, 0x82,
	0x44, 0x49, 0x63, 0x97, 0xA5, 0x0A, 0x07, 0x7A, 0x49, 0x64, 0x6E, 0x84, 0xB0, 0x07, 0x07, 0x7A, 0x55, 0x58, 0x6C, 0x7E, 0x07, 0x07,
	0x07, 0x4E, 0x54, 0x50, 0x59, 0x49, 0x4C, 0x74, 0x07, 0x07, 0x53, 0x50, 0x59, 0x44, 0x61, 0x4C, 0xA4, 0x07, 0x49, 0x50, 0x59, 0x4D,
	0x61, 0x4C, 0x3D, 0x07, 0x42, 0x51, 0x58, 0x52, 0x4D, 0x48, 0x42, 0x3F, 0xD9, 0x63, 0x4A, 0x62, 0x43, 0x57, 0x70, 0x83, 0x3F, 0x63,
	0x53, 0x86, 0x4C, 0x3B, 0x58, 0x65, 0x80, 0x49, 0x43, 0x58, 0x55, 0x45, 0x50, 0x59, 0x4C, 0x4C, 0x58, 0x50, 0x3C, 0x4C, 0x44, 0x59,
	0x5E, 0x07, 0x74, 0x43, 0x98, 0x96, 0x74, 0xA2, 0x89, 0x07, 0x3D, 0x44, 0x67, 0x84, 0x69, 0x74, 0x89, 0x07, 0x69, 0x3B, 0x4F, 0x65,
	0x47, 0x74, 0x3D, 0x07, 0x4E, 0x44, 0x50, 0x58, 0x3D, 0xA4, 0x54, 0x6D, 0x67, 0x43, 0x50, 0x58, 0x69, 0x07, 0x44, 0x55, 0x58, 0x50,
	0x51, 0x4F, 0x58, 0x80, 0x44, 0x3B, 0x68, 0x5A, 0x45, 0x51, 0x68, 0x59, 0x44, 0x4C, 0x43, 0x58, 0x38, 0x61, 0x51, 0x59, 0x07, 0x07,
	0x3D, 0x44, 0x50, 0x59, 0x3D, 0x07, 0x07, 0x07, 0x47, 0x3B, 0x43, 0x58, 0x5C, 0x07, 0xAB, 0x07, 0x3D, 0x3B, 0x44, 0x58, 0x5A, 0x07,
	0x80, 0x07, 0x74, 0x44, 0x4C, 0x4F, 0x5A, 0x07, 0x27, 0x23, 0x1F, 0x21, 0x24, 0x13, 0xFE, 0xF2, 0x27, 0x07, 0x21, 0x1D, 0x24, 0x07,
	0x0E, 0x07, 0x07, 0x1E, 0x1D, 0x1D, 0x1D, 0x1E, 0x07, 0xF7, 0x07, 0x12, 0x1B, 0x1D, 0x1B, 0x12, 0x07, 0xF5, 0xFC, 0xF3, 0xF4, 0xF2,
	0xEC, 0xE9, 0xE6, 0xE2, 0xF4, 0xF6, 0x2F, 0xF1, 0xEC, 0x07, 0xE6, 0xE0, 0xF8, 0xF8, 0xF9, 0xF7, 0xE7, 0xE5, 0xE3, 0xE2, 0xF7, 0xF9,
	0xF8, 0xEE, 0x11, 0xEB, 0xE5, 0xE3, 0xE6, 0xE9, 0xE3, 0xEC, 0xEC, 0x9E, 0x44, 0x56, 0xE6, 0x2F, 0xE6, 0xEC, 0xD1, 0x58, 0x64, 0x7D,
	0xE0, 0xE3, 0xEC, 0xE5, 0x8D, 0x70, 0x67, 0x57, 0xE2, 0xE4, 0xEE, 0x87, 0x7A, 0x7D, 0x7D, 0x69, 0x87, 0x07, 0x07, 0x07, 0x4E, 0x42,
	0x77, 0x49, 0x74, 0xD9, 0x74, 0x89, 0x55, 0x77, 0x57, 0x86, 0xA3, 0x61, 0x66, 0x57, 0x55, 0x7A, 0x6D, 0x70, 0x61, 0x77, 0x90, 0x7B,
	0x77, 0x77, 0x85, 0x67, 0x62, 0x66, 0x07, 0x4E, 0x4B, 0x43, 0x62, 0x89, 0x6E, 0x7C, 0x30, 0x63, 0x67, 0x6D, 0x58, 0x74, 0x86, 0x9A,
	0x47, 0x64, 0x86, 0x70, 0x7A, 0x2E, 0x87, 0x07, 0x47, 0x64, 0x92, 0x70, 0x73, 0x07, 0x07, 0x74, 0x53, 0x44, 0x67, 0x48, 0x61, 0x50,
	0x07, 0x47, 0x55, 0x55, 0x68, 0x61, 0x61, 0x50, 0x07, 0x69, 0x49, 0x57, 0x7A, 0x89, 0x82, 0x82, 0x0A, 0x7A, 0x8B, 0x77, 0x7A, 0x99,
	0xB0, 0x82, 0x56, 0x7D, 0x7E, 0xDD, 0x07, 0x07, 0xD9, 0x63, 0x7E, 0x93, 0x15, 0x07, 0x07, 0x07, 0x74, 0x51, 0x3A, 0xC5, 0x07, 0x07,
	0x07, 0x07, 0x47, 0x64, 0x82, 0x61, 0x47, 0x07, 0x07, 0x07, 0x89, 0x7A, 0x58, 0x43, 0x68, 0x5C, 0x3E, 0x4C, 0x49, 0x50, 0x59, 0x68,
	0x68, 0x69, 0x6F, 0x71, 0x57, 0x55, 0x86, 0x70, 0x7B, 0x31, 0x69, 0x59, 0x64, 0x66, 0x92, 0x70, 0x87, 0x07, 0x9A, 0x92, 0x70, 0x7B,
	0x4C, 0x44, 0x4F, 0x5C, 0x89, 0x4C, 0x44, 0x70, 0x57, 0x50, 0x72, 0x99, 0x74, 0x42, 0x55, 0x5A, 0x64, 0x72, 0x7F, 0x07, 0x61, 0x77,
	0x57, 0x71, 0x79, 0x7F, 0x32, 0x07, 0x4D, 0x8B, 0x77, 0x8D, 0x47, 0x07, 0x42, 0x58, 0x64, 0x58, 0x89, 0x07, 0xAB, 0x5E, 0x63, 0x59,
	0x68, 0x86, 0x5E, 0xD9, 0xAB, 0x89, 0x64, 0x59, 0x70, 0x73, 0x07, 0xAB, 0xAB, 0xAA, 0x7A, 0x86, 0x70, 0x87, 0x07, 0xA2, 0x4C, 0x4C,
	0x51, 0x68, 0x39, 0x61, 0x3B, 0x68, 0x42, 0x57, 0x64, 0x5C, 0x47, 0x45, 0x4D, 0x57, 0x77, 0x4C, 0x55, 0x87, 0x07, 0x74, 0x42, 0x55,
	0x77, 0x8B, 0x7B, 0x69, 0x07, 0x07, 0x4C, 0x8B, 0x5A, 0xD9, 0x07, 0x45, 0x3B, 0x68, 0x7E, 0x07, 0x50, 0x3F, 0x31, 0x61, 0x4C, 0x71,
	0x5B, 0x07, 0x57, 0x66, 0x47, 0x5F, 0x45, 0x7A, 0x69, 0x07, 0x77, 0x77, 0x8B, 0xA3, 0x82, 0x7B, 0x89, 0x07, 0x07, 0x07, 0x1E, 0x0F,
	0x1E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1C, 0x1D, 0x15, 0x07, 0x07, 0x07, 0x07, 0x12, 0x1B, 0x1F, 0x1E, 0x07, 0x07, 0xF5, 0x07, 0x1E,
	0x1D, 0x1F, 0x1F, 0x20, 0xFD, 0xF7, 0xFA, 0xF8, 0xFA, 0x07, 0x07, 0xDA, 0xE8, 0xE5, 0xFA, 0xFB, 0x0B, 0x07, 0x07, 0x07, 0xDC, 0xE3,
	0xF8, 0xF9, 0xFA, 0x07, 0x07, 0x07, 0xE7, 0xE1, 0xF9, 0xF9, 0xF8, 0xF5, 0x07, 0xDB, 0xE2, 0xE2, 0xE5, 0xFD, 0x07, 0x87, 0x90, 0x86,
	0x98, 0xAA, 0xDB, 0x07, 0x07, 0xB9, 0xAF, 0xA9, 0xAD, 0x9E, 0xE5, 0x07, 0x07, 0xC9, 0xC6, 0xBA, 0xAD, 0xB6, 0xE1, 0xE4, 0x07, 0xA2,
	0xBE, 0xBA, 0xBF, 0xC1, 0x74, 0x92, 0x86, 0x98, 0x86, 0x92, 0x92, 0x92, 0x07, 0x9E, 0x9D, 0x98, 0x9D, 0x97, 0x9D, 0xA9, 0x07, 0xD9,
	0xB2, 0xB2, 0x9E, 0xB2, 0xB7, 0xCE, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xBC, 0x07, 0x89, 0x90, 0x92, 0x98, 0xA9, 0x0A,
	0xAB, 0x07, 0xB7, 0xA9, 0xA6, 0x98, 0xAD, 0x9A, 0x07, 0x07, 0x5E, 0xB1, 0xB3, 0xAD, 0xAD, 0xD9, 0x07, 0x07, 0x07, 0xC1, 0xBA, 0xC0,
	0xB6, 0x07, 0xD9, 0x92, 0x91, 0xA8, 0x95, 0xC3, 0x89, 0x90, 0x07, 0x9E, 0xA6, 0xA6, 0x92, 0xA3, 0x9A, 0xA9, 0x07, 0xB2, 0xAF, 0xA9,
	0xAD, 0xC4, 0x07, 0xAA, 0x07, 0xB7, 0xBE, 0xB5, 0xB6, 0x07, 0x07, 0x07, 0x95, 0x77, 0x90, 0xAA, 0x07, 0x07, 0x89, 0x90, 0xA9, 0xB1,
	0xA7, 0xA6, 0x89, 0x07, 0x99, 0xA9, 0x9D, 0x9D, 0xAD, 0xAF, 0xB6, 0xD9, 0x9A, 0xA9, 0xC2, 0xB5, 0xBF, 0xB5, 0xBE, 0xAA, 0x07, 0xCB,
	0x92, 0x98, 0xA9, 0xD9, 0x07, 0xBD, 0x9E, 0x98, 0xA6, 0x98, 0x98, 0x31, 0x07, 0x07, 0x2F, 0x99, 0xB3, 0xB6, 0xAD, 0x0A, 0x07, 0x07,
	0x07, 0x07, 0xBA, 0xB5, 0xC0, 0x07, 0x07, 0x07, 0x07, 0x07, 0x7F, 0xBD, 0x07, 0x0A, 0x7A, 0x91, 0xA8, 0x95, 0x15, 0x07, 0x07, 0x07,
	0x9E, 0xA6, 0xA6, 0x92, 0x07, 0x07, 0x07, 0x07, 0x9E, 0xB3, 0xB6, 0xB6, 0x07, 0x07, 0x07, 0x07, 0xB2, 0xBE, 0xB5, 0xB6, 0x99, 0x80,
	0x90, 0x6D, 0x98, 0x92, 0x07, 0x99, 0xC8, 0x80, 0xA6, 0x92, 0x98, 0x98, 0x07, 0xA2, 0x9A, 0xD6, 0xB6, 0xB3, 0xAD, 0xAD, 0x07, 0xC4,
	0x07, 0x0A, 0xC1, 0xBA, 0xB5, 0xB6, 0x07, 0xD9, 0x92, 0x95, 0x90, 0x8B, 0x07, 0x07, 0x7E, 0xA0, 0x92, 0xA7, 0xA6, 0x9E, 0x0A, 0x07,
	0x99, 0xA9, 0xA9, 0xB3, 0xAD, 0xB1, 0x07, 0x07, 0x07, 0xB2, 0xB6, 0xB4, 0xBB, 0xB7, 0x07, 0x07, 0x07, 0xBD, 0x95, 0x9E, 0x92, 0x8B,
	0xB0, 0xAE, 0xB0, 0x07, 0xA7, 0x92, 0x98, 0x9E, 0xC7, 0xA8, 0xAA, 0x07, 0xAF, 0xB3, 0xAD, 0xB1, 0xC9, 0xB1, 0xC2, 0x07, 0xC1, 0xBE,
	0xBE, 0xBA, 0xC1, 0xB6, 0xA3, 0x07, 0x11, 0x1C, 0x1D, 0x1D, 0x1B, 0x20, 0x0B, 0xFA, 0x07, 0x1C, 0x1B, 0x1B, 0x1B, 0x11, 0x07, 0xF5,
	0x07, 0x12, 0x1C, 0x12, 0x1C, 0x07, 0x07, 0x0B, 0x07, 0x11, 0x11, 0x11, 0x12, 0x07, 0x07, 0xFD, 0xF9, 0xF9, 0xF8, 0x0B, 0xEE, 0xD2,
	0xE3, 0xE2, 0xF8, 0xF8, 0xFB, 0x07, 0xFD, 0xD7, 0xE5, 0xE3, 0x0B, 0xFD, 0xFA, 0x07, 0x07, 0xD8, 0xE8, 0xEB, 0x0B, 0x0B, 0x0B, 0x07,
	0x07, 0xD9, 0xEA, 0xD8, 0xE2, 0xE4, 0xD9, 0x07, 0xD1, 0xC6, 0xBB, 0xCB, 0xE2, 0xD2, 0x07, 0x07, 0xCF, 0xD0, 0xCA, 0xD2, 0xE8, 0xD7,
	0x07, 0x07, 0x07, 0xCF, 0xCD, 0xC4, 0xD6, 0xD8, 0x07, 0x07, 0x07, 0xC4, 0xC9, 0xD8, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x99, 0xCC, 0xC6, 0xC1, 0x07, 0x07, 0x07, 0x07, 0x07, 0xCB, 0xCA, 0xCB, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0xB7, 0xD6, 0x07, 0x07, 0x07, 0x07, 0x07, 0xA4, 0xC4, 0x2E, 0x07, 0x07, 0xC4, 0xCC, 0xC6, 0xD2, 0x07, 0x07, 0x07, 0x07, 0x07,
	0xD1, 0xBE, 0xDA, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD8, 0xD6, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0A, 0xC4, 0xD9, 0x07, 0x07, 0x07, 0x07,
	0x07, 0xB7, 0xC0, 0xCA, 0xCA, 0xC0, 0x07, 0xD6, 0x07, 0x07, 0xC5, 0xB0, 0xC9, 0xCB, 0xD9, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x0A, 0xD9, 0xA4, 0x07, 0x07, 0x0A, 0xC6, 0xC6, 0xC1, 0x07, 0x07, 0x07, 0x07, 0x07, 0xCB, 0xCA, 0xD3, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0xD2, 0xD7, 0x07, 0x07, 0x07, 0x07, 0x07, 0xA4, 0xC4, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0xA2, 0xCC, 0xBB, 0xC2, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD1, 0xD0, 0x9A, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD7, 0xD2, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0xD8, 0xC4, 0x07, 0x07, 0x07, 0xCF, 0xCC, 0xC6, 0xC1, 0x07, 0x07, 0x07, 0x07, 0x07, 0xCB, 0xCA, 0xC7,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xDB, 0xD8, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD9, 0xCF, 0x9A, 0x07, 0x07, 0xCB, 0xC6, 0xCD, 0x9A,
	0x07, 0x07, 0x07, 0x07, 0xC3, 0xCA, 0xCB, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD2, 0xC4, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xCF,
	0xD8, 0x07, 0x07, 0x07, 0x07, 0x07, 0xBC, 0xB2, 0xC0, 0xCC, 0xD1, 0xD1, 0x07, 0x07, 0x07, 0x07, 0xCE, 0xCB, 0xCC, 0xC7, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0xD2, 0xD9, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD9, 0xC4, 0xD9, 0x07, 0x07, 0x07, 0x12, 0x1C, 0x10, 0x1C, 0x11,
	0xFD, 0xF5, 0x07, 0x07, 0x12, 0x1C, 0x12, 0x07, 0x07, 0xFD, 0x11, 0x12, 0x1C, 0x1C, 0x1C, 0x12, 0x0B, 0xF5, 0x12, 0x1C, 0x1E, 0x1E,
	0x1E, 0x0D, 0x0C, 0xFA, 0xFA, 0xF7, 0xF5, 0x0B, 0x07, 0xD7, 0xDB, 0xE7, 0xF5, 0xF5, 0xF5, 0x07, 0x07, 0xEE, 0xD6, 0xD6, 0xFA, 0xFA,
	0xFA, 0xEF, 0xEA, 0xDB, 0xE4, 0xE4, 0xFA, 0xFA, 0xEF, 0xEA, 0xDB, 0xE4, 0xE7, 0xE7, 0xDB, 0xEB, 0xD9, 0x5E, 0xA1, 0x9F, 0xAE, 0xA2,
	0xD7, 0x0A, 0x08, 0x37, 0x49, 0x48, 0x40, 0x08, 0xDB, 0xDB, 0xD3, 0xC7, 0x48, 0x37, 0x2C, 0x09, 0xDB, 0xEA, 0xEB, 0xCF, 0xCF, 0x3A,
	0x2C, 0x2C, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x5E, 0x61, 0x48, 0x49, 0x48, 0x61, 0x3A, 0x08, 0x08, 0x08, 0x09, 0x09,
	0x2C, 0x2B, 0x37, 0x2C, 0x08, 0x0A, 0x07, 0x0A, 0x2D, 0x09, 0x09, 0x09, 0x07, 0x0A, 0x5E, 0xA1, 0x9F, 0xA1, 0x5E, 0x07, 0x0A, 0x0A,
	0x09, 0x37, 0x36, 0x37, 0x40, 0x2D, 0x09, 0x09, 0x2C, 0x2C, 0x09, 0x08, 0x2D, 0x08, 0x09, 0x09, 0x2C, 0x2C, 0x09, 0x08, 0x08, 0x09,
	0x5E, 0xA1, 0x9F, 0xB0, 0xA4, 0x07, 0x07, 0x5E, 0x2D, 0x40, 0x3A, 0x3A, 0x09, 0x2D, 0x08, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08,
	0x08, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x09, 0x09, 0x09, 0x2C, 0xA1, 0x9F, 0x90, 0x9F, 0xA2, 0x5E, 0x5E, 0xA1, 0x37, 0x37, 0x3A, 0x40,
	0x2D, 0x2D, 0x09, 0x37, 0x0A, 0x07, 0x07, 0x0A, 0x08, 0x2C, 0x37, 0x37, 0x37, 0x3A, 0x08, 0x2D, 0x2D, 0x08, 0x2C, 0x2C, 0x9F, 0xA1,
	0x5E, 0x07, 0x07, 0x07, 0x07, 0x07, 0x48, 0x61, 0x40, 0x0A, 0x07, 0x07, 0x0A, 0x2D, 0x2C, 0x09, 0x09, 0x09, 0x09, 0x2C, 0x2C, 0x2B,
	0x2C, 0x09, 0x09, 0x09, 0x08, 0x08, 0x09, 0x2C, 0x07, 0x07, 0x07, 0x2D, 0x82, 0x9F, 0xA1, 0x5E, 0x0A, 0x07, 0x07, 0x08, 0x3A, 0x3A,
	0x40, 0x40, 0x3A, 0x40, 0x08, 0x2D, 0x2D, 0x08, 0x09, 0x08, 0x2B, 0x2B, 0x2B, 0x2C, 0x09, 0x2C, 0x2C, 0x2C, 0x0A, 0x2D, 0x82, 0xAE,
	0x9F, 0x82, 0x0A, 0x0A, 0x40, 0x37, 0x48, 0x48, 0x3A, 0x08, 0x2D, 0x09, 0x08, 0x09, 0x2C, 0x2B, 0x09, 0x08, 0x2D, 0x08, 0x08, 0x08,
	0x09, 0x2C, 0x2C, 0x09, 0x08, 0x09, 0x82, 0x9F, 0xA1, 0x5E, 0x07, 0x07, 0x07, 0x0A, 0x3A, 0x3A, 0x3A, 0x08, 0x07, 0x07, 0x2D, 0x40,
	0x09, 0x09, 0x08, 0x2D, 0x2D, 0x2D, 0x09, 0x09, 0x2C, 0x2C, 0x2C, 0x09, 0x09, 0x2C, 0x2B, 0x2C, 0x5E, 0x82, 0xA1, 0xAE, 0xAE, 0x82,
	0xA4, 0x07, 0x37, 0x37, 0x37, 0x3A, 0x40, 0x08, 0x2D, 0x07, 0x09, 0x08, 0x2D, 0x2D, 0x08, 0x08, 0x2D, 0x0A, 0x08, 0x2D, 0x2D, 0x08,
	0x09, 0x2C, 0x09, 0x2D, 0x07, 0x07, 0x11, 0x12, 0x11, 0x07, 0x07, 0xFD, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xD9,
	0x33, 0xD4, 0x35, 0x35, 0x0E, 0x31, 0x07, 0x07, 0x27, 0x0E, 0x35, 0x14, 0x27, 0x15, 0x0B, 0xF5, 0xFD, 0x07, 0x07, 0xD8, 0xD7, 0xD8,
	0x07, 0xFD, 0x07, 0x0A, 0x15, 0x27, 0x0E, 0xD4, 0xA4, 0xA2, 0xB0, 0x93, 0x8A, 0x94, 0x94, 0xD5, 0x07, 0x0A, 0xA4, 0x5E, 0xAB, 0x27,
	0xFE, 0xFE, 0xD9, 0x07, 0x2E, 0x2D, 0x09, 0x2B, 0x2B, 0x2B, 0xF0, 0xF0, 0x34, 0x34, 0x89, 0x48, 0x36, 0x37, 0xD5, 0xD5, 0x35, 0x0E,
	0x27, 0x07, 0x07, 0x07, 0x27, 0x15, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x2B, 0x2C, 0x2C, 0x09, 0x08, 0x08, 0x09, 0x09, 0x2C, 0x2B,
	0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2C, 0x07, 0x0A, 0x2D, 0x09, 0x08, 0x2D, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x08, 0x08, 0x09, 0x2C, 0x2C, 0x09, 0x09, 0x2C, 0x08, 0x0A, 0x07, 0x0A, 0x08, 0x08, 0x2D, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x2B, 0x2B, 0x09, 0x2D, 0x0A, 0x2D, 0x08, 0x2C, 0x2D, 0x09, 0x3A, 0x40,
	0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x2B, 0x36,
	0x3A, 0x09, 0x08, 0x09, 0x2C, 0x2B, 0x07, 0x0A, 0x2D, 0x2D, 0x0A, 0x0A, 0x0A, 0x2D, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x2C, 0x09, 0x08, 0x2D, 0x0A, 0x07, 0x0A, 0x08, 0x08, 0x08, 0x08, 0x0A, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x09, 0x2B, 0x2A, 0x2B,
	0x2B, 0x2B, 0x2B, 0x2C, 0x07, 0x0A, 0x08, 0x2C, 0x2B, 0x2C, 0x08, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x09, 0x2B, 0x37, 0x2C, 0x09, 0x2C, 0x07, 0x0A, 0x08, 0x40, 0x5E, 0x2D, 0x08, 0x3A,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C,
	0x09, 0x2D, 0x36, 0x36, 0x09, 0x2D, 0x07, 0x07, 0x07, 0x07, 0x0A, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x0A, 0x0A, 0x2D, 0x09, 0x2C, 0x2C, 0x09, 0x2D, 0x07, 0x0A, 0x08, 0x2C, 0x2C, 0x09, 0x0A, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
};

static char* icon_datas[] = { p_icon_data, nullptr, nullptr, p_icon_data, nullptr, nullptr, nullptr, o_icon_data };
static char* icon_pals[]  = { p_icon_palette };

/*
 * --INFO--
 * Address:	........
 * Size:	000014
 */
void MemoryCard::GetBlockSize(s32)
{
	// UNUSED FUNCTION
}

/*
 * --INFO--
 * Address:	800738C8
 * Size:	00000C
 */
int MemoryCard::getOptionsOffset(int id)
{
	return id * 0x2000 + 0x2000;
}

/*
 * --INFO--
 * Address:	800738D4
 * Size:	00000C
 */
int MemoryCard::getGameFileOffset(int id)
{
	return id * 0x8000 + 0x6000;
}

/*
 * --INFO--
 * Address:	........
 * Size:	00000C
 */
void* MemoryCard::getBannerPtr()
{
	return cardData;
	// UNUSED FUNCTION
}

/*
 * --INFO--
 * Address:	........
 * Size:	000018
 */
void* MemoryCard::getOptionsPtr(int idx)
{
	return &cardData[getOptionsOffset(idx)];
	// UNUSED FUNCTION
}

/*
 * --INFO--
 * Address:	........
 * Size:	000018
 */
void* MemoryCard::getGameFilePtr(int idx)
{
	return &cardData[getGameFileOffset(idx)];
	// UNUSED FUNCTION
}

/*
 * --INFO--
 * Address:	........
 * Size:	00006C
 */
RamStream* MemoryCard::getBannerStream()
{
	return new RamStream(getBannerPtr(), 0x2000);
	// UNUSED FUNCTION
}

/*
 * --INFO--
 * Address:	........
 * Size:	000084
 */
RamStream* MemoryCard::getOptionsStream(int idx)
{
	return new RamStream(getOptionsPtr(idx), 0x2000);
}

/*
 * --INFO--
 * Address:	........
 * Size:	000088
 */
RamStream* MemoryCard::getGameFileStream(int idx)
{
	return new RamStream(getGameFilePtr(idx), 0x8000);
}

/*
 * --INFO--
 * Address:	800738E0
 * Size:	00017C
 */
u32 MemoryCard::calcChecksum(void* dataptr, u32 length)
{
	u32 sum = 0x32546532;
	for (int i = 0; i < length >> 2; i++) {
		u8 i2   = i;
		u32 val = *((u32*)dataptr + i);
		sum += (i2 << 24) | (((i2 + 1) & 0xFF) << 16) | (((i2 - 1) & 0xFF) << 8) | ((i2 + 2) & 0xFF);
		sum += val;
	}
	sum = 0x32546532 - sum;
	return sum;
}

/*
 * --INFO--
 * Address:	80073A5C
 * Size:	000070
 */
bool MemoryCard::hasCardFinished()
{
	bool res = !CardUtilIsCardBusy();
	if (res) {
		CardUtilUnmount(0);
		CardUtilIdleWhileBusy();
		if (CardUtilResultCode() < -1) {
			mDidSaveFail = true;
		}
	}

	return res;
}

/*
 * --INFO--
 * Address:	........
 * Size:	000078
 */
void MemoryCard::waitPolling()
{
	while (!hasCardFinished()) { }
}

/*
 * --INFO--
 * Address:	........
 * Size:	000054
 */
void MemoryCard::createFile(CARDStat& state)
{
	mDidSaveFail            = false;
	gameflow.mGamePrefs._E0 = 0;
	gameflow.mGamePrefs._DC = 0;
	gsys->mIsCardSaving     = TRUE;
	memset(&state, 0, sizeof(CARDStat));
	// UNUSED FUNCTION
}

/*
 * --INFO--
 * Address:	........
 * Size:	0000A8
 */
void MemoryCard::writeOneBanner()
{
	CardUtilMount(0, &CardWorkArea);
	CardUtilIdleWhileBusy();
	CardUtilWrite(0, mSaveFileIndex, getBannerPtr(), 0, 0x2000);
	waitPolling();
}

/*
 * --INFO--
 * Address:	........
 * Size:	0000B8
 */
void MemoryCard::writeOneOption(int idx)
{
	// initOptionsArea(idx);
	CardUtilMount(0, &CardWorkArea);
	CardUtilIdleWhileBusy();
	CardUtilWrite(0, mSaveFileIndex, &cardData[getOptionsOffset(idx)], getOptionsOffset(idx), 0x2000);
	waitPolling();
}

/*
 * --INFO--
 * Address:	........
 * Size:	000074
 */
void MemoryCard::writeOneGameFile(int idx)
{
	CardUtilMount(0, &CardWorkArea);
	CardUtilIdleWhileBusy();

	CardUtilWrite(0, mSaveFileIndex, &cardData[getGameFileOffset(idx)], getGameFileOffset(idx), 0x8000);
}

/*
 * --INFO--
 * Address:	80073ACC
 * Size:	000134
 */
bool MemoryCard::attemptFormatCard(int channel)
{
	if (CARDProbe(channel)) {
		if (CARDMountAsync(channel, &CardWorkArea, 0, 0) < 0) {
			mErrorCode = CARD_RESULT_WRONGDEVICE;
			return false;
		}

		switch (waitWhileBusy(channel)) {
		default:
			CARDUnmount(channel);
			mErrorCode = CARD_RESULT_BROKEN;
			return false;
		case CARD_RESULT_READY:
		case CARD_RESULT_BROKEN:
		case CARD_RESULT_ENCODING:
			if (CARDFormatAsync(channel, 0) < 0) {
				CARDUnmount(channel);
				mErrorCode = CARD_RESULT_BROKEN;
				return false;
			} else {
				if (waitWhileBusy(channel) < 0) {
					CARDUnmount(channel);
					mErrorCode = CARD_RESULT_BROKEN;
					return false;
				} else {
					CARDUnmount(channel);
					mErrorCode = CARD_RESULT_READY;
					return true;
				}
			}
			break;
		}
	}
	mErrorCode = CARD_RESULT_BUSY;
	return false;
}

/*
 * --INFO--
 * Address:	80073C00
 * Size:	000038
 */
s32 MemoryCard::waitWhileBusy(int chan)
{
	s32 res;
	do {
		res = CARDGetResultCode(chan);
	} while (res == CARD_RESULT_BUSY);
	return res;
}

/*
 * --INFO--
 * Address:	80073C38
 * Size:	0001BC
 */
bool MemoryCard::getCardStatus(int channel)
{
	if (CARDProbe(channel)) {
		if (CARDMountAsync(channel, &CardWorkArea, nullptr, nullptr) < 0) {
			mErrorCode = CARD_RESULT_WRONGDEVICE;
			return false;
		}

		s32 res = waitWhileBusy(channel);
		switch (res) {
		case CARD_RESULT_ENCODING:
			CARDUnmount(channel);
			mErrorCode = CARD_RESULT_IOERROR;
			return false;
		case CARD_RESULT_READY:
		case CARD_RESULT_BROKEN:
			if (CARDCheckAsync(channel, 0) < 0) {
				CARDUnmount(channel);
				mErrorCode = CARD_RESULT_NOFILE;
				return false;
			}
			res = waitWhileBusy(channel);
		}
		switch (res) {
		case CARD_RESULT_NOCARD:
			mErrorCode = CARD_RESULT_BUSY;
			return false;

		case CARD_RESULT_BROKEN:
			CARDUnmount(channel);
			mErrorCode = CARD_RESULT_NOFILE;
			return false;

		default:
			mErrorCode = CARD_RESULT_EXIST;
			return false;

		case CARD_RESULT_READY:
			if (CARDGetSectorSize(channel, &mSectorSize) < 0) {
				CARDUnmount(channel);
				mErrorCode = CARD_RESULT_NOFILE;
				return false;
			}

			if (mSectorSize > 0x2000) {
				CARDUnmount(channel);
				mErrorCode = CARD_RESULT_BROKEN;
				return false;
			}
			return true;
		}
	}
	mErrorCode = CARD_RESULT_BUSY;
	return false;
}

/*
 * --INFO--
 * Address:	80073DF4
 * Size:	0000FC
 */
void MemoryCard::checkUseFile()
{
	for (int i = 0; i < 127; i++) {
		OSCalendarTime calendar;
		CARDStat stat;
		if (CARDGetStatus(mCardChannel, i, &stat) < 0) {
			continue;
		}
		OSTime time = OSSecondsToTicks((OSTime)stat.time);
		OSTicksToCalendarTime(time, &calendar);

		(void)((u32)i / 100);

		if (!strncmp(stat.fileName, basecardname, 15)) {
			strcpy(mFilePath, stat.fileName);
			mSaveFileIndex = i;
			break;
		}

		if (!strncmp(stat.fileName, "Pikmin", 6)) {
			mTempFileIndex = i;
		} else if (!strncmp(stat.fileName, "~Pikmin", 7)) {
			mTempFileIndex = i;
		}
	}
}

/*
 * --INFO--
 * Address:	80073EF0
 * Size:	000174
 */
s32 MemoryCard::getMemoryCardState(bool flag)
{
	mCardChannel   = -1;
	mErrorCode     = CARD_RESULT_READY;
	mSaveFileIndex = -1;
	mTempFileIndex = -1;

	for (int channel = 0; channel < 1; channel++) {
		if (getCardStatus(channel)) {
			mCardChannel = channel;
			checkUseFile();
			if (mSaveFileIndex == -1) {
				s32 temp, temp2;
				if (CARDFreeBlocks(mCardChannel, &temp, &temp2) < 0) {
					CARDUnmount(mCardChannel);
					mCardChannel = -1;
					mErrorCode   = CARD_RESULT_NOFILE;
					break;
				}
				if (temp2 < 1) {
					CARDUnmount(mCardChannel);
					mSaveFileIndex = -2;
					mErrorCode     = CARD_RESULT_NOENT;
					break;
				}
				if (temp < mRequiredFreeSpace) {
					CARDUnmount(mCardChannel);
					mSaveFileIndex = -2;
					mErrorCode     = CARD_RESULT_NOCARD;
					break;
				}
				CARDUnmount(mCardChannel);
			}
		}

		if (flag && mCardChannel >= 0 && mSaveFileIndex != -2) {
			loadCurrentFile();
			mErrorCode = CARD_RESULT_READY;
		} else if (mTempFileIndex != -1) {
			CardUtilMount(channel, &CardWorkArea);
			CardUtilIdleWhileBusy();
			CardUtilErase(channel, mTempFileIndex);
			CardUtilIdleWhileBusy();
			CardUtilUnmount(channel);
			CardUtilIdleWhileBusy();
		}
	}

	return mErrorCode;
}

/*
 * --INFO--
 * Address:	80074064
 * Size:	0000B0
 */
void MemoryCard::loadCurrentFile()
{
	CardUtilMount(0, &CardWorkArea);
	CardUtilIdleWhileBusy();
	CARDGetStatus(0, mSaveFileIndex, &cst);
	CardUtilOpen(0, mSaveFileIndex, &cardData);
	CardUtilIdleWhileBusy();
	CardUtilUnmount(0);
	CardUtilIdleWhileBusy();

	OSCalendarTime calendar;
	STACK_PAD_VAR(1);
	OSTime time = OSSecondsToTicks((OSTime)cst.time);
	OSTicksToCalendarTime(time, &calendar);
}

/*
 * --INFO--
 * Address:	80074114
 * Size:	0001DC
 */
s32 MemoryCard::getNewestOptionsIndex()
{
	int a = -1;
	int b = -1;
	for (int i = 0; i < 2; i++) {
		u32 sum           = calcChecksum(&cardData[0x2000 * i + 0x2000], 0x1FF8);
		RamStream* stream = getOptionsStream(i);
		stream->setPosition(0x1FF8);
		int thisSum = stream->readInt();
		int nextSum = stream->readInt();

		if (nextSum == sum && thisSum > a) {
			a = thisSum;
			b = i;
		}
	}

	if (b != -1) {
		gameflow.mGamePrefs._E0 = a + 1;
	}
	return b;

	STACK_PAD_VAR(8);
}

/*
 * --INFO--
 * Address:	800742F0
 * Size:	0000A4
 */
void MemoryCard::loadOptions()
{
	int id = getNewestOptionsIndex();
	if (id != -1) {
		RamStream* data = new RamStream(&cardData[0x2000 * id + 0x2000], 0x2000);
		gameflow.mGamePrefs.read(*data);
	}

	STACK_PAD_VAR(6);
}

/*
 * --INFO--
 * Address:	80074394
 * Size:	0000D4
 */
void MemoryCard::saveOptions()
{
	gsys->mIsCardSaving = 1;
	mDidSaveFail        = false;
	if (getMemoryCardState(true) == 0 && mSaveFileIndex >= 0) {
		int idx = getNewestOptionsIndex();
		if (idx != -1) {
			idx ^= 1;
			initOptionsArea(idx);
			writeOneOption(idx);
		}
	}
	gsys->mIsCardSaving = false;
	STACK_PAD_VAR(2);
}

/*
 * --INFO--
 * Address:	80074468
 * Size:	0000AC
 */
void MemoryCard::loadCurrentGame()
{
	int val         = gameflow.mGamePrefs.mSaveGameIndex - 1;
	RamStream* data = getGameFileStream(val);
	readCurrentGame(data);

	STACK_PAD_VAR(2);
}

/*
 * --INFO--
 * Address:	80074514
 * Size:	000424
 */
void MemoryCard::saveCurrentGame()
{
	mDidSaveFail                    = false;
	gsys->mIsCardSaving             = TRUE;
	gameflow.mPlayState.mSaveStatus = 2;
	gameflow.mPlayState.mSavedDay   = gameflow.mWorldClock.mCurrentDay;

	RamStream* stream = getGameFileStream(gameflow.mGamePrefs.mSpareSaveGameIndex - 1);

	writeCurrentGame(stream, gameflow.mPlayState);
	stream->padFileTo(0x8000, 8);

	u32 sum = calcChecksum(getGameFilePtr(gameflow.mGamePrefs.mSpareSaveGameIndex - 1), 0x7FF8);
	stream->writeInt(gameflow.mGamePrefs._DC);
	stream->writeInt(sum);

	writeOneGameFile(gameflow.mGamePrefs.mSpareSaveGameIndex - 1);
	waitPolling();
	saveOptions();

	u8 idx                                  = gameflow.mGamePrefs.mSaveGameIndex;
	gameflow.mGamePrefs.mSaveGameIndex      = gameflow.mGamePrefs.mSpareSaveGameIndex;
	gameflow.mGamePrefs.mSpareSaveGameIndex = idx;
	gameflow.mSaveGameCrc                   = sum;
	gameflow.mGamePrefs._DC++;
	gameflow.mGamePrefs.mHasSaveGame = true;
	gsys->mIsCardSaving              = FALSE;

	STACK_PAD_VAR(10);
}

/*
 * --INFO--
 * Address:	80074938
 * Size:	000128
 */
void MemoryCard::writeCurrentGame(RandomAccessStream* output, PlayState& playState)
{
	if (playerState) {
		playState.mRedPikiCount    = playerState->hasContainer(Red) ? pikiInfMgr.getColorTotal(Red) : -1;
		playState.mYellowPikiCount = playerState->hasContainer(Yellow) ? pikiInfMgr.getColorTotal(Yellow) : -1;
		playState.mBluePikiCount   = playerState->hasContainer(Blue) ? pikiInfMgr.getColorTotal(Blue) : -1;
		playState.mShipPartsCount  = playerState->getCardUfoPartsCount();
	}

	playState.write(*output);
	if (playState.mSaveStatus == 2 && playerState) {
		playerState->saveCard(*output);
	}
}

/*
 * --INFO--
 * Address:	80074A60
 * Size:	000070
 */
void MemoryCard::readCurrentGame(RandomAccessStream* data)
{
	gameflow.mPlayState.read(*data);
	if (gameflow.mPlayState.mSaveStatus == 2 && playerState) {
		playerState->loadCard(*data);
	}
	gameflow.mWorldClock.mCurrentDay = gameflow.mPlayState.mSavedDay;
}

/*
 * --INFO--
 * Address:	80074AD0
 * Size:	0003B0
 */
void MemoryCard::initBannerArea(CARDStat& state, char* p2)
{
	char comment1[0x20];
	char comment2[0x20];

	RamStream stream(cardData, state.length);
	sprintf(comment1, "Pikmin");
	sprintf(comment2, "Blocks");

	CARDSetCommentAddress(&state, stream.mPosition);
	stream.write(comment1, 0x20);
	stream.write(comment2, 0x20);

	CARDSetIconAddress(&state, stream.mPosition);
	state.bannerFormat = 1;
	stream.write(p_card_v_data, 0xC00);
	stream.write(p_card_v_palette, 0x200);

	int i;
	for (i = 0; i < 8; i++) {
		if (icon_datas[i]) {
			CARDSetIconFormat(&state, i, CARD_STAT_ICON_C8);
			stream.write(icon_datas[i], 0x400);
		} else {
			CARDSetIconFormat(&state, i, CARD_STAT_ICON_NONE);
		}

		CARDSetIconSpeed(&state, i, CARD_STAT_SPEED_SLOW);
	}

	for (int j = i; j < 8; j++) {
		CARDSetIconSpeed(&state, j, CARD_STAT_SPEED_END);
	}

	stream.write(icon_pals[0], 0x200);
	CARDSetIconAnim(&state, CARD_STAT_ANIM_BOUNCE);

	stream.padFileTo(0x1FFC, 0);
	u32 sum = calcChecksum(cardData, 0x1FFC);
	stream.writeInt(sum);

	STACK_PAD_VAR(1);
}

static char* errCodes[] = {
	"No Error",      "ERR! No Card", "ERR! Not a Card",    "ERR! Card Fullup", "ERR! Card Broken", "ERR! Card Wrong Country",
	"ERR! Unusable", "ERR! Unknown", "ERR! No Files Left",
};

/*
 * --INFO--
 * Address:	........
 * Size:	000404
 */
void MemoryCard::initFileArea(int idx, int p2)
{
	RamStream* stream = gameflow.mMemoryCard.getGameFileStream(p2);
	PlayState state;
	state.Initialise();
	state.mSaveFlags = idx;
	if (idx == 3) {
		state.mSaveFlags = 0;
	}

	writeCurrentGame(stream, state);
	stream->padFileTo(0x8000, 8);

	u32 sum = calcChecksum(getGameFilePtr(p2), 0x7FF8);
	stream->writeInt(gameflow.mGamePrefs._DC);
	stream->writeInt(sum);
	// UNUSED FUNCTION
}

/*
 * --INFO--
 * Address:	80074E80
 * Size:	000210
 */
void MemoryCard::initOptionsArea(int idx)
{
	RamStream* stream = gameflow.mMemoryCard.getOptionsStream(idx); // ??
	gameflow.mGamePrefs.write(*stream);
	stream->padFileTo(0x1FF8, 0);
	u32 sum = calcChecksum(getOptionsPtr(idx), 0x1FF8);
	stream->writeInt(gameflow.mGamePrefs._E0);
	stream->writeInt(sum);
	STACK_PAD_VAR(4);
}

/*
 * --INFO--
 * Address:	80075090
 * Size:	000414
 */
s32 MemoryCard::makeDefaultFile()
{
	createFile(cst);
	cst.length = ((mRequiredFreeSpace + mSectorSize - 1) / (mSectorSize)) * mSectorSize;
	memset(cardData, 0, cst.length);
	STACK_PAD_VAR(1);
	OSCalendarTime calendar;
	OSTicksToCalendarTime(OSGetTime(), &calendar);

	char buf1[36];
	sprintf(buf1, "%s", basecardname);
	char buf2[36];
	sprintf(buf2, "%02d/%02d %02d:%02d", calendar.mon + 1, calendar.mday, calendar.hour, calendar.min);
	strncpy(cst.fileName, buf1, 0x20);
	initBannerArea(cst, buf2);

	int i;
	for (i = 0; i < 2; i++) {
		initOptionsArea(i);
		gameflow.mGamePrefs._E0++;
	}

	for (i = 0; i < 4; i++) {
		initFileArea(i, i);
		gameflow.mGamePrefs._DC++;
	}

	CardUtilMount(0, &CardWorkArea);
	CardUtilIdleWhileBusy();
	CardUtilSave(0, &cst, cardData);
	gsys->mIsCardSaving = FALSE;
	mErrorCode          = 0;

	STACK_PAD_VAR(1);
	STACK_PAD_TERNARY(mRequiredFreeSpace, 4);
	return mErrorCode;
	/*
	.loc_0x0:
	  mflr      r0
	  lis       r4, 0x803A
	  stw       r0, 0x4(r1)
	  li        r0, 0
	  lis       r5, 0x802B
	  stwu      r1, -0x120(r1)
	  stmw      r14, 0xD8(r1)
	  subi      r17, r4, 0x2848
	  subi      r14, r5, 0x5FE0
	  addi      r31, r3, 0
	  addi      r16, r17, 0x174
	  addi      r30, r17, 0x170
	  li        r5, 0x6C
	  stb       r0, 0x68(r3)
	  lis       r3, 0x803A
	  subi      r15, r3, 0x1E20
	  stw       r0, 0x174(r17)
	  addi      r3, r15, 0
	  stw       r0, 0x170(r17)
	  li        r0, 0x1
	  lwz       r4, 0x2DEC(r13)
	  stw       r0, 0x270(r4)
	  li        r4, 0
	  bl        -0x71DCC
	  lwz       r5, 0x64(r31)
	  addis     r3, r15, 0x1
	  lwz       r4, 0x40(r31)
	  subi      r3, r3, 0x5F80
	  subi      r0, r5, 0x1
	  add       r0, r4, r0
	  divwu     r0, r0, r5
	  mullw     r0, r5, r0
	  stw       r0, 0x20(r15)
	  li        r4, 0
	  lwz       r5, 0x20(r15)
	  bl        -0x71DFC
	  bl        0x188280
	  addi      r5, r1, 0xAC
	  bl        0x188498
	  addi      r3, r1, 0x88
	  crclr     6, 0x6
	  addi      r5, r14, 0x1C
	  subi      r4, r13, 0x6534
	  bl        0x1A145C
	  lwz       r5, 0xBC(r1)
	  addi      r3, r1, 0x64
	  lwz       r6, 0xB8(r1)
	  addi      r4, r14, 0x1B30
	  lwz       r7, 0xB4(r1)
	  lwz       r8, 0xB0(r1)
	  addi      r5, r5, 0x1
	  crclr     6, 0x6
	  bl        0x1A1438
	  addi      r3, r15, 0
	  addi      r4, r1, 0x88
	  li        r5, 0x20
	  bl        0x1A41A4
	  addi      r3, r31, 0
	  addi      r4, r15, 0
	  addi      r5, r1, 0x64
	  bl        -0x6B0
	  lis       r4, 0x8022
	  lis       r3, 0x802A
	  addi      r28, r17, 0x24
	  addi      r18, r17, 0x94
	  addis     r22, r15, 0x1
	  addi      r21, r4, 0x74C8
	  addi      r20, r3, 0x755C
	  li        r19, 0
	  li        r17, 0x2000

	.loc_0x118:
	  li        r3, 0x14
	  bl        -0x2E1A8
	  addi      r23, r3, 0
	  mr.       r0, r23
	  beq-      .loc_0x164
	  addi      r3, r28, 0
	  addi      r4, r19, 0
	  bl        -0x18FC
	  add       r24, r22, r3
	  addi      r3, r23, 0
	  subi      r24, r24, 0x5F80
	  bl        .loc_0x414
	  stw       r21, 0x4(r23)
	  li        r3, 0
	  li        r0, 0x2000
	  stw       r20, 0x4(r23)
	  stw       r24, 0x8(r23)
	  stw       r3, 0xC(r23)
	  stw       r0, 0x10(r23)

	.loc_0x164:
	  addi      r3, r18, 0
	  addi      r4, r23, 0
	  bl        -0x20E10
	  addi      r26, r23, 0
	  addi      r3, r26, 0
	  lwz       r12, 0x4(r26)
	  lwz       r12, 0x58(r12)
	  mtlr      r12
	  blrl
	  subfic    r25, r3, 0x1FF8
	  li        r24, 0
	  b         .loc_0x1B0

	.loc_0x194:
	  mr        r3, r26
	  lwz       r12, 0x4(r26)
	  li        r4, 0
	  lwz       r12, 0x28(r12)
	  mtlr      r12
	  blrl
	  addi      r24, r24, 0x1

	.loc_0x1B0:
	  cmpw      r24, r25
	  blt+      .loc_0x194
	  add       r4, r22, r17
	  addi      r3, r31, 0
	  subi      r4, r4, 0x5F80
	  li        r5, 0x1FF8
	  bl        -0x1978
	  lwz       r12, 0x4(r23)
	  mr        r24, r3
	  lwz       r4, 0x0(r16)
	  mr        r3, r23
	  lwz       r12, 0x24(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r23
	  lwz       r12, 0x4(r23)
	  mr        r4, r24
	  lwz       r12, 0x24(r12)
	  mtlr      r12
	  blrl
	  lwz       r3, 0x0(r16)
	  addi      r19, r19, 0x1
	  cmpwi     r19, 0x2
	  addi      r0, r3, 0x1
	  stw       r0, 0x0(r16)
	  addi      r17, r17, 0x2000
	  blt+      .loc_0x118
	  lis       r8, 0x8022
	  lis       r7, 0x802A
	  lis       r6, 0x1
	  lis       r5, 0x8022
	  lis       r4, 0x8022
	  lis       r3, 0x802A
	  addis     r21, r15, 0x1
	  addi      r22, r8, 0x74C8
	  addi      r23, r7, 0x755C
	  subi      r24, r6, 0x8000
	  addi      r25, r5, 0x738C
	  addi      r26, r4, 0x737C
	  addi      r16, r3, 0x696C
	  li        r27, 0
	  li        r29, 0x6000

	.loc_0x258:
	  li        r3, 0x14
	  bl        -0x2E2E8
	  addi      r20, r3, 0
	  mr.       r0, r20
	  beq-      .loc_0x2A0
	  addi      r3, r28, 0
	  addi      r4, r27, 0
	  bl        -0x1A30
	  add       r17, r21, r3
	  addi      r3, r20, 0
	  subi      r17, r17, 0x5F80
	  bl        .loc_0x414
	  stw       r22, 0x4(r20)
	  li        r0, 0
	  stw       r23, 0x4(r20)
	  stw       r17, 0x8(r20)
	  stw       r0, 0xC(r20)
	  stw       r24, 0x10(r20)

	.loc_0x2A0:
	  stw       r25, 0x38(r1)
	  li        r17, 0
	  addi      r3, r1, 0x38
	  stw       r26, 0x38(r1)
	  addi      r4, r14, 0x1B24
	  stw       r17, 0x48(r1)
	  stw       r17, 0x44(r1)
	  stw       r17, 0x40(r1)
	  bl        -0x5047C
	  stw       r16, 0x38(r1)
	  li        r3, 0x1
	  li        r0, -0x1
	  stb       r17, 0x5B(r1)
	  cmpwi     r27, 0x3
	  stb       r3, 0x58(r1)
	  stb       r3, 0x58(r1)
	  stw       r0, 0x54(r1)
	  stw       r0, 0x50(r1)
	  stw       r0, 0x4C(r1)
	  stb       r3, 0x59(r1)
	  stb       r17, 0x5A(r1)
	  stw       r3, 0x5C(r1)
	  stb       r27, 0x5B(r1)
	  bne-      .loc_0x304
	  stb       r17, 0x5B(r1)

	.loc_0x304:
	  addi      r3, r31, 0
	  addi      r4, r20, 0
	  addi      r5, r1, 0x38
	  bl        -0xA68
	  addi      r17, r20, 0
	  addi      r3, r17, 0
	  lwz       r12, 0x4(r17)
	  lwz       r12, 0x58(r12)
	  mtlr      r12
	  blrl
	  sub       r3, r24, r3
	  subi      r18, r3, 0x8
	  li        r19, 0
	  b         .loc_0x358

	.loc_0x33C:
	  mr        r3, r17
	  lwz       r12, 0x4(r17)
	  li        r4, 0
	  lwz       r12, 0x28(r12)
	  mtlr      r12
	  blrl
	  addi      r19, r19, 0x1

	.loc_0x358:
	  cmpw      r19, r18
	  blt+      .loc_0x33C
	  add       r4, r21, r29
	  addi      r3, r31, 0
	  subi      r4, r4, 0x5F80
	  li        r5, 0x7FF8
	  bl        -0x1B20
	  lwz       r12, 0x4(r20)
	  mr        r17, r3
	  lwz       r4, 0x0(r30)
	  mr        r3, r20
	  lwz       r12, 0x24(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r20
	  lwz       r12, 0x4(r20)
	  mr        r4, r17
	  lwz       r12, 0x24(r12)
	  mtlr      r12
	  blrl
	  lwz       r3, 0x0(r30)
	  addi      r27, r27, 0x1
	  addis     r29, r29, 0x1
	  addi      r0, r3, 0x1
	  cmpwi     r27, 0x4
	  stw       r0, 0x0(r30)
	  subi      r29, r29, 0x8000
	  blt+      .loc_0x258
	  li        r3, 0
	  addi      r4, r15, 0x80
	  bl        -0x27CEC
	  bl        -0x27C6C
	  addis     r5, r15, 0x1
	  addi      r4, r15, 0
	  li        r3, 0
	  subi      r5, r5, 0x5F80
	  bl        -0x27BD8
	  lwz       r3, 0x2DEC(r13)
	  li        r0, 0
	  stw       r0, 0x270(r3)
	  stw       r0, 0x44(r31)
	  lwz       r3, 0x44(r31)
	  lwz       r0, 0x124(r1)
	  lmw       r14, 0xD8(r1)
	  addi      r1, r1, 0x120
	  mtlr      r0
	  blr

	.loc_0x414:
	*/
}

/*
 * --INFO--
 * Address:	800754B4
 * Size:	000314
 */
void MemoryCard::copyFile(CardQuickInfo& p1, CardQuickInfo& p2)
{
	mDidSaveFail        = false;
	gsys->mIsCardSaving = TRUE;
	memcpy(getGameFilePtr(gameflow.mGamePrefs.mSpareSaveGameIndex - 1), getGameFilePtr(p1.mIndex), 0x8000);

	RamStream* stream = getGameFileStream(gameflow.mGamePrefs.mSpareSaveGameIndex - 1);
	stream->writeByte(2);
	stream->writeByte(p2.mFlags);
	stream->setPosition(0x7FF8);

	u32 sum = calcChecksum(getGameFilePtr(gameflow.mGamePrefs.mSpareSaveGameIndex - 1), 0x7FF8);
	stream->writeInt(gameflow.mGamePrefs._DC);
	stream->writeInt(sum);
	writeOneGameFile(gameflow.mGamePrefs.mSpareSaveGameIndex - 1);
	gsys->mIsCardSaving = FALSE;

	STACK_PAD_VAR(12);

	/*
	.loc_0x0:
	  mflr      r0
	  lis       r6, 0x803A
	  stw       r0, 0x4(r1)
	  li        r0, 0x1
	  stwu      r1, -0xB0(r1)
	  stmw      r24, 0x90(r1)
	  li        r29, 0
	  addi      r26, r5, 0
	  subi      r28, r6, 0x1E20
	  lis       r5, 0x803A
	  addi      r25, r3, 0
	  addis     r30, r28, 0x1
	  lis       r31, 0x1
	  stb       r29, 0x68(r3)
	  subi      r3, r5, 0x2848
	  addi      r27, r3, 0xB5
	  lwz       r5, 0x2DEC(r13)
	  stw       r0, 0x270(r5)
	  subi      r5, r31, 0x8000
	  lbz       r3, 0xB5(r3)
	  lwz       r4, 0x0(r4)
	  subi      r0, r3, 0x1
	  rlwinm    r3,r0,15,0,16
	  rlwinm    r0,r4,15,0,16
	  addi      r3, r3, 0x6000
	  add       r4, r0, r30
	  add       r3, r30, r3
	  subi      r3, r3, 0x5F80
	  addi      r4, r4, 0x80
	  bl        -0x72114
	  lbz       r4, 0x0(r27)
	  li        r3, 0x14
	  subi      r24, r4, 0x1
	  bl        -0x2E534
	  cmplwi    r3, 0
	  beq-      .loc_0xD0
	  lis       r4, 0x8022
	  addi      r0, r4, 0x7398
	  lis       r4, 0x8022
	  stw       r0, 0x4(r3)
	  addi      r0, r4, 0x74C8
	  lis       r4, 0x802A
	  stw       r0, 0x4(r3)
	  addi      r4, r4, 0x755C
	  rlwinm    r0,r24,15,0,16
	  stw       r4, 0x4(r3)
	  add       r4, r0, r30
	  addi      r0, r4, 0x80
	  stw       r0, 0x8(r3)
	  subi      r0, r31, 0x8000
	  stw       r29, 0xC(r3)
	  stw       r0, 0x10(r3)

	.loc_0xD0:
	  mr        r29, r3
	  lwz       r12, 0x4(r29)
	  li        r4, 0x2
	  lwz       r12, 0x28(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r29
	  lwz       r0, 0x4(r26)
	  lwz       r12, 0x4(r29)
	  rlwinm    r4,r0,0,24,31
	  lwz       r12, 0x28(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r29
	  lwz       r12, 0x4(r29)
	  li        r4, 0x7FF8
	  lwz       r12, 0x5C(r12)
	  mtlr      r12
	  blrl
	  lbz       r3, 0x0(r27)
	  li        r0, 0x666
	  mtctr     r0
	  lis       r4, 0x3254
	  subi      r0, r3, 0x1
	  addis     r3, r28, 0x1
	  rlwinm    r0,r0,15,0,16
	  add       r12, r0, r3
	  addi      r24, r4, 0x6532
	  li        r11, 0
	  addi      r12, r12, 0x80

	.loc_0x148:
	  rlwinm    r10,r11,0,24,31
	  lwz       r0, 0x0(r12)
	  addi      r5, r10, 0x1
	  rlwinm    r6,r11,24,0,7
	  rlwinm    r4,r5,16,8,15
	  subi      r7, r10, 0x1
	  or        r4, r6, r4
	  rlwinm    r6,r7,8,16,23
	  addi      r11, r11, 0x1
	  addi      r9, r10, 0x2
	  rlwinm    r10,r11,0,24,31
	  or        r3, r6, r4
	  rlwimi    r3,r9,0,24,31
	  addi      r5, r10, 0x1
	  rlwinm    r6,r11,24,0,7
	  addi      r9, r10, 0x2
	  rlwinm    r4,r5,16,8,15
	  add       r24, r24, r3
	  add       r24, r24, r0
	  lwz       r0, 0x4(r12)
	  addi      r11, r11, 0x1
	  subi      r7, r10, 0x1
	  rlwinm    r10,r11,0,24,31
	  or        r4, r6, r4
	  rlwinm    r6,r7,8,16,23
	  rlwinm    r8,r9,0,24,31
	  or        r3, r6, r4
	  addi      r5, r10, 0x1
	  rlwinm    r6,r11,24,0,7
	  rlwinm    r4,r5,16,8,15
	  or        r3, r8, r3
	  addi      r9, r10, 0x2
	  add       r24, r24, r3
	  add       r24, r24, r0
	  lwz       r0, 0x8(r12)
	  subi      r7, r10, 0x1
	  addi      r11, r11, 0x1
	  rlwinm    r10,r11,0,24,31
	  or        r4, r6, r4
	  rlwinm    r6,r7,8,16,23
	  rlwinm    r8,r9,0,24,31
	  or        r3, r6, r4
	  addi      r5, r10, 0x1
	  rlwinm    r6,r11,24,0,7
	  rlwinm    r4,r5,16,8,15
	  or        r3, r8, r3
	  add       r24, r24, r3
	  add       r24, r24, r0
	  lwz       r0, 0xC(r12)
	  subi      r7, r10, 0x1
	  or        r4, r6, r4
	  rlwinm    r6,r7,8,16,23
	  addi      r11, r11, 0x1
	  addi      r9, r10, 0x2
	  rlwinm    r10,r11,0,24,31
	  or        r3, r6, r4
	  rlwimi    r3,r9,0,24,31
	  addi      r5, r10, 0x1
	  add       r24, r24, r3
	  rlwinm    r4,r5,16,8,15
	  rlwimi    r4,r11,24,0,7
	  add       r24, r24, r0
	  lwz       r0, 0x10(r12)
	  subi      r7, r10, 0x1
	  addi      r3, r4, 0
	  addi      r9, r10, 0x2
	  rlwimi    r3,r7,8,16,23
	  rlwimi    r3,r9,0,24,31
	  add       r24, r24, r3
	  add       r24, r24, r0
	  addi      r12, r12, 0x14
	  addi      r11, r11, 0x1
	  bdnz+     .loc_0x148
	  mr        r3, r29
	  lwz       r12, 0x4(r29)
	  lis       r5, 0x3254
	  lis       r4, 0x803A
	  lwz       r12, 0x24(r12)
	  addi      r0, r5, 0x6532
	  subi      r4, r4, 0x2848
	  sub       r0, r0, r24
	  mtlr      r12
	  lwz       r4, 0x170(r4)
	  mr        r24, r0
	  blrl
	  mr        r3, r29
	  lwz       r12, 0x4(r29)
	  mr        r4, r24
	  lwz       r12, 0x24(r12)
	  mtlr      r12
	  blrl
	  lbz       r5, 0x0(r27)
	  addi      r4, r28, 0x80
	  li        r3, 0
	  subi      r24, r5, 0x1
	  bl        -0x28004
	  bl        -0x27F84
	  rlwinm    r3,r24,15,0,16
	  lwz       r4, 0x38(r25)
	  addi      r6, r3, 0x6000
	  addis     r0, r28, 0x1
	  add       r5, r0, r6
	  lis       r3, 0x1
	  subi      r7, r3, 0x8000
	  li        r3, 0
	  subi      r5, r5, 0x5F80
	  bl        -0x27ED0
	  lwz       r3, 0x2DEC(r13)
	  li        r0, 0
	  stw       r0, 0x270(r3)
	  lwz       r0, 0xB4(r1)
	  lmw       r24, 0x90(r1)
	  addi      r1, r1, 0xB0
	  mtlr      r0
	  blr
	*/
}

/*
 * --INFO--
 * Address:	800757C8
 * Size:	000454
 */
void MemoryCard::delFile(CardQuickInfo& p1)
{
	mDidSaveFail        = false;
	gsys->mIsCardSaving = TRUE;
	PlayState state;
	state.Initialise();
	state.mSaveFlags  = p1.mFlags;
	RamStream* stream = getGameFileStream(gameflow.mGamePrefs.mSpareSaveGameIndex - 1);
	writeCurrentGame(stream, state);
	stream->padFileTo(0x8000, 8);
	u32 sum = calcChecksum(getGameFilePtr(gameflow.mGamePrefs.mSpareSaveGameIndex - 1), 0x7FF8);
	stream->writeInt(gameflow.mGamePrefs._DC);
	stream->writeInt(sum);
	writeOneGameFile(gameflow.mGamePrefs.mSpareSaveGameIndex - 1);
	gsys->mIsCardSaving = FALSE;

	STACK_PAD_VAR(7);
}

/*
 * --INFO--
 * Address:	80075C1C
 * Size:	00006C
 */
int MemoryCard::doFormatCard()
{
	PRINT("*-----------------------------------------------------------*\n");
	PRINT("Formatting memory card ....\n");
	mDidSaveFail        = false;
	gsys->mIsCardSaving = true;
	attemptFormatCard(false);
	gsys->mIsCardSaving = false;
	int state           = gameflow.mMemoryCard.getMemoryCardState(false);
	STACK_PAD_VAR(1);
	return mErrorCode;
}

/*
 * --INFO--
 * Address:	80075C88
 * Size:	000034
 */
bool MemoryCard::isCardInserted()
{
	return !!CARDProbe(0);
}

/*
 * --INFO--
 * Address:	80075CBC
 * Size:	00022C
 */
bool MemoryCard::hasCardChanged()
{
	if (!gameflow.mGamePrefs.mHasSaveGame || !isCardInserted()) {
		return true;
	}
	char buf[0x20];
	strcpy(buf, mFilePath);

	if (gameflow.mMemoryCard.getMemoryCardState(true) || gameflow.mMemoryCard.mSaveFileIndex < 0) {
		return true;
	}

	if (strcmp(buf, mFilePath) != 0) { // not the same
		return true;
	}
	u32 sum = calcChecksum(getGameFilePtr(gameflow.mGamePrefs.mSaveGameIndex - 1), 0x7FF8);
	if (sum != gameflow.mSaveGameCrc) {
		return true;
	}

	STACK_PAD_VAR(2);

	return false;
}

/*
 * --INFO--
 * Address:	80075EE8
 * Size:	000574
 */
u32 MemoryCard::getOkSections()
{
	STACK_PAD_VAR(2);
	u32 flag          = (0x1 | 0x2 | 0x4 | 0x8 | 0x10 | 0x20 | 0x40);
	u32 sum           = calcChecksum(getBannerPtr(), 0x1FFC);
	RamStream* stream = getBannerStream();
	stream->setPosition(0x1FFC);
	int val = stream->readInt();
	if (val != sum) {
		flag &= ~0x1;
	}

	mValidOptionsCount = 0;
	int i;
	int j = 1;
	for (i = 0; i < 2; i++) {
		u32 sum           = calcChecksum(getOptionsPtr(i), 0x1FF8);
		RamStream* stream = getOptionsStream(i);
		stream->setPosition(0x1FF8);
		stream->readInt();
		int val = stream->readInt();
		if (val != sum) {
			flag &= ~(1 << j);
		} else {
			mValidOptionsCount++;
		}
		j++;
	}

	PlayState state;
	mValidBlockCount = 0;
	mValidSlots[0]   = 0;
	mValidSlots[1]   = 0;
	mValidSlots[2]   = 0;
	for (i = 0; i < 4; i++) {
		u32 sum           = calcChecksum(getGameFilePtr(i), 0x7FF8);
		RamStream* stream = getGameFileStream(i);
		state.read(*stream);
		int idx = state.mSaveFlags;
		stream->setPosition(0x7FF8);
		stream->readInt();
		int val = stream->readInt();
		if (val != sum) {
			flag &= ~(1 << j);
		} else if (mValidSlots[idx] == 0) {
			mValidSlots[idx] = 1;
			mValidBlockCount++;
		}
		j++;
	}

	STACK_PAD_VAR(16);
	return flag;

	/*
	.loc_0x0:
	  mflr      r0
	  lis       r4, 0x803A
	  stw       r0, 0x4(r1)
	  li        r0, 0x7FF
	  mtctr     r0
	  li        r6, 0
	  stwu      r1, -0x130(r1)
	  stmw      r17, 0xF4(r1)
	  subi      r19, r4, 0x1E20
	  addis     r8, r19, 0x1
	  lis       r4, 0x3254
	  addi      r31, r3, 0
	  addi      r7, r4, 0x6532
	  li        r30, 0x7F
	  subi      r8, r8, 0x5F80

	.loc_0x3C:
	  rlwinm    r5,r6,0,24,31
	  lwz       r0, 0x0(r8)
	  addi      r3, r5, 0x1
	  subi      r4, r5, 0x1
	  rlwinm    r3,r3,16,8,15
	  rlwimi    r3,r6,24,0,7
	  addi      r5, r5, 0x2
	  rlwimi    r3,r4,8,16,23
	  rlwimi    r3,r5,0,24,31
	  add       r7, r7, r3
	  add       r7, r7, r0
	  addi      r8, r8, 0x4
	  addi      r6, r6, 0x1
	  bdnz+     .loc_0x3C
	  lis       r3, 0x3254
	  addi      r0, r3, 0x6532
	  sub       r18, r0, r7
	  li        r3, 0x14
	  bl        -0x2EF68
	  cmplwi    r3, 0
	  beq-      .loc_0xD0
	  lis       r4, 0x8022
	  addi      r0, r4, 0x7398
	  lis       r4, 0x8022
	  stw       r0, 0x4(r3)
	  addi      r0, r4, 0x74C8
	  lis       r4, 0x802A
	  stw       r0, 0x4(r3)
	  addi      r0, r4, 0x755C
	  addis     r4, r19, 0x1
	  stw       r0, 0x4(r3)
	  subi      r0, r4, 0x5F80
	  stw       r0, 0x8(r3)
	  li        r4, 0
	  li        r0, 0x2000
	  stw       r4, 0xC(r3)
	  stw       r0, 0x10(r3)

	.loc_0xD0:
	  mr        r20, r3
	  lwz       r12, 0x4(r20)
	  li        r4, 0x1FFC
	  lwz       r12, 0x5C(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r20
	  lwz       r12, 0x4(r20)
	  lwz       r12, 0x8(r12)
	  mtlr      r12
	  blrl
	  cmplw     r3, r18
	  beq-      .loc_0x108
	  rlwinm    r30,r30,0,0,30

	.loc_0x108:
	  li        r0, 0
	  lis       r24, 0x3254
	  stw       r0, 0x60(r31)
	  lis       r5, 0x8022
	  lis       r4, 0x8022
	  lis       r3, 0x802A
	  addis     r25, r19, 0x1
	  addi      r26, r24, 0x6532
	  addi      r27, r5, 0x7398
	  addi      r28, r4, 0x74C8
	  addi      r20, r3, 0x755C
	  li        r29, 0x1
	  li        r21, 0
	  li        r23, 0x2000

	.loc_0x140:
	  add       r22, r25, r23
	  li        r0, 0x2AA
	  subi      r22, r22, 0x5F80
	  mtctr     r0
	  addi      r11, r22, 0
	  addi      r10, r24, 0x6532
	  li        r9, 0

	.loc_0x15C:
	  rlwinm    r8,r9,0,24,31
	  lwz       r0, 0x0(r11)
	  addi      r4, r8, 0x1
	  rlwinm    r5,r9,24,0,7
	  rlwinm    r3,r4,16,8,15
	  subi      r6, r8, 0x1
	  or        r3, r5, r3
	  rlwinm    r5,r6,8,16,23
	  addi      r9, r9, 0x1
	  addi      r7, r8, 0x2
	  rlwinm    r8,r9,0,24,31
	  or        r3, r5, r3
	  rlwimi    r3,r7,0,24,31
	  add       r10, r10, r3
	  addi      r4, r8, 0x1
	  rlwinm    r5,r9,24,0,7
	  rlwinm    r3,r4,16,8,15
	  add       r10, r10, r0
	  lwz       r0, 0x4(r11)
	  subi      r6, r8, 0x1
	  or        r3, r5, r3
	  rlwinm    r5,r6,8,16,23
	  addi      r7, r8, 0x2
	  addi      r9, r9, 0x1
	  rlwinm    r8,r9,0,24,31
	  or        r3, r5, r3
	  rlwimi    r3,r7,0,24,31
	  add       r10, r10, r3
	  addi      r4, r8, 0x1
	  rlwinm    r3,r4,16,8,15
	  rlwimi    r3,r9,24,0,7
	  subi      r6, r8, 0x1
	  add       r10, r10, r0
	  lwz       r0, 0x8(r11)
	  addi      r7, r8, 0x2
	  rlwimi    r3,r6,8,16,23
	  rlwimi    r3,r7,0,24,31
	  add       r10, r10, r3
	  add       r10, r10, r0
	  addi      r11, r11, 0xC
	  addi      r9, r9, 0x1
	  bdnz+     .loc_0x15C
	  sub       r18, r26, r10
	  li        r3, 0x14
	  bl        -0x2F0F0
	  cmplwi    r3, 0
	  beq-      .loc_0x238
	  stw       r27, 0x4(r3)
	  li        r4, 0
	  li        r0, 0x2000
	  stw       r28, 0x4(r3)
	  stw       r20, 0x4(r3)
	  stw       r22, 0x8(r3)
	  stw       r4, 0xC(r3)
	  stw       r0, 0x10(r3)

	.loc_0x238:
	  mr        r22, r3
	  lwz       r12, 0x4(r22)
	  li        r4, 0x1FF8
	  lwz       r12, 0x5C(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r22
	  lwz       r12, 0x4(r22)
	  lwz       r12, 0x8(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r22
	  lwz       r12, 0x4(r22)
	  lwz       r12, 0x8(r12)
	  mtlr      r12
	  blrl
	  cmplw     r3, r18
	  beq-      .loc_0x290
	  li        r0, 0x1
	  slw       r0, r0, r29
	  andc      r30, r30, r0
	  b         .loc_0x29C

	.loc_0x290:
	  lwz       r3, 0x60(r31)
	  addi      r0, r3, 0x1
	  stw       r0, 0x60(r31)

	.loc_0x29C:
	  addi      r21, r21, 0x1
	  cmpwi     r21, 0x2
	  addi      r29, r29, 0x1
	  addi      r23, r23, 0x2000
	  blt+      .loc_0x140
	  lis       r3, 0x8022
	  addi      r0, r3, 0x738C
	  lis       r3, 0x8022
	  stw       r0, 0xB8(r1)
	  addi      r0, r3, 0x737C
	  stw       r0, 0xB8(r1)
	  li        r28, 0
	  lis       r4, 0x802B
	  stw       r28, 0xC8(r1)
	  subi      r0, r4, 0x44BC
	  lis       r25, 0x3254
	  stw       r28, 0xC4(r1)
	  lis       r6, 0x8022
	  lis       r5, 0x8022
	  stw       r28, 0xC0(r1)
	  lis       r4, 0x802A
	  lis       r3, 0x802A
	  stw       r0, 0xBC(r1)
	  addi      r0, r3, 0x696C
	  lis       r3, 0x1
	  stw       r0, 0xB8(r1)
	  addis     r24, r19, 0x1
	  li        r0, 0x1
	  stb       r28, 0xDB(r1)
	  addi      r23, r25, 0x6532
	  addi      r22, r6, 0x7398
	  stb       r0, 0xD8(r1)
	  addi      r21, r5, 0x74C8
	  addi      r20, r4, 0x755C
	  stw       r28, 0x5C(r31)
	  subi      r19, r3, 0x8000
	  li        r26, 0x6000
	  stw       r28, 0x4C(r31)
	  stw       r28, 0x50(r31)
	  stw       r28, 0x54(r31)

	.loc_0x33C:
	  add       r27, r24, r26
	  li        r0, 0x666
	  subi      r27, r27, 0x5F80
	  mtctr     r0
	  addi      r3, r27, 0
	  addi      r18, r25, 0x6532
	  li        r12, 0

	.loc_0x358:
	  rlwinm    r11,r12,0,24,31
	  lwz       r0, 0x0(r3)
	  addi      r6, r11, 0x1
	  rlwinm    r7,r12,24,0,7
	  rlwinm    r5,r6,16,8,15
	  subi      r8, r11, 0x1
	  or        r5, r7, r5
	  rlwinm    r7,r8,8,16,23
	  addi      r12, r12, 0x1
	  addi      r10, r11, 0x2
	  rlwinm    r11,r12,0,24,31
	  or        r4, r7, r5
	  rlwimi    r4,r10,0,24,31
	  addi      r6, r11, 0x1
	  rlwinm    r7,r12,24,0,7
	  addi      r10, r11, 0x2
	  rlwinm    r5,r6,16,8,15
	  add       r18, r18, r4
	  add       r18, r18, r0
	  lwz       r0, 0x4(r3)
	  addi      r12, r12, 0x1
	  subi      r8, r11, 0x1
	  rlwinm    r11,r12,0,24,31
	  or        r5, r7, r5
	  rlwinm    r7,r8,8,16,23
	  rlwinm    r9,r10,0,24,31
	  or        r4, r7, r5
	  addi      r6, r11, 0x1
	  rlwinm    r7,r12,24,0,7
	  rlwinm    r5,r6,16,8,15
	  or        r4, r9, r4
	  addi      r10, r11, 0x2
	  add       r18, r18, r4
	  add       r18, r18, r0
	  lwz       r0, 0x8(r3)
	  subi      r8, r11, 0x1
	  addi      r12, r12, 0x1
	  rlwinm    r11,r12,0,24,31
	  or        r5, r7, r5
	  rlwinm    r7,r8,8,16,23
	  rlwinm    r9,r10,0,24,31
	  or        r4, r7, r5
	  addi      r6, r11, 0x1
	  rlwinm    r7,r12,24,0,7
	  rlwinm    r5,r6,16,8,15
	  or        r4, r9, r4
	  add       r18, r18, r4
	  add       r18, r18, r0
	  lwz       r0, 0xC(r3)
	  subi      r8, r11, 0x1
	  or        r5, r7, r5
	  rlwinm    r7,r8,8,16,23
	  addi      r12, r12, 0x1
	  addi      r10, r11, 0x2
	  rlwinm    r11,r12,0,24,31
	  or        r4, r7, r5
	  rlwimi    r4,r10,0,24,31
	  addi      r6, r11, 0x1
	  add       r18, r18, r4
	  rlwinm    r5,r6,16,8,15
	  rlwimi    r5,r12,24,0,7
	  add       r18, r18, r0
	  lwz       r0, 0x10(r3)
	  subi      r8, r11, 0x1
	  addi      r4, r5, 0
	  addi      r10, r11, 0x2
	  rlwimi    r4,r8,8,16,23
	  rlwimi    r4,r10,0,24,31
	  add       r18, r18, r4
	  add       r18, r18, r0
	  addi      r3, r3, 0x14
	  addi      r12, r12, 0x1
	  bdnz+     .loc_0x358
	  sub       r18, r23, r18
	  li        r3, 0x14
	  bl        -0x2F368
	  cmplwi    r3, 0
	  beq-      .loc_0x4AC
	  stw       r22, 0x4(r3)
	  li        r0, 0
	  stw       r21, 0x4(r3)
	  stw       r20, 0x4(r3)
	  stw       r27, 0x8(r3)
	  stw       r0, 0xC(r3)
	  stw       r19, 0x10(r3)

	.loc_0x4AC:
	  addi      r27, r3, 0
	  addi      r4, r27, 0
	  addi      r3, r1, 0xB8
	  bl        -0x21960
	  mr        r3, r27
	  lbz       r17, 0xDB(r1)
	  lwz       r12, 0x4(r27)
	  li        r4, 0x7FF8
	  lwz       r12, 0x5C(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r27
	  lwz       r12, 0x4(r27)
	  lwz       r12, 0x8(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r27
	  lwz       r12, 0x4(r27)
	  lwz       r12, 0x8(r12)
	  mtlr      r12
	  blrl
	  cmplw     r3, r18
	  beq-      .loc_0x518
	  li        r0, 0x1
	  slw       r0, r0, r29
	  andc      r30, r30, r0
	  b         .loc_0x544

	.loc_0x518:
	  rlwinm    r3,r17,2,0,29
	  addi      r3, r3, 0x4C
	  add       r3, r31, r3
	  lwz       r0, 0x0(r3)
	  cmpwi     r0, 0
	  bne-      .loc_0x544
	  li        r0, 0x1
	  stw       r0, 0x0(r3)
	  lwz       r3, 0x5C(r31)
	  addi      r0, r3, 0x1
	  stw       r0, 0x5C(r31)

	.loc_0x544:
	  addi      r28, r28, 0x1
	  cmpwi     r28, 0x4
	  addis     r26, r26, 0x1
	  addi      r29, r29, 0x1
	  subi      r26, r26, 0x8000
	  blt+      .loc_0x33C
	  mr        r3, r30
	  lmw       r17, 0xF4(r1)
	  lwz       r0, 0x134(r1)
	  addi      r1, r1, 0x130
	  mtlr      r0
	  blr
	*/
}

/*
 * --INFO--
 * Address:	8007645C
 * Size:	0000A0
 */
bool MemoryCard::isFileBroken()
{
	if (gameflow.mMemoryCard.getMemoryCardState(true) == 0 && gameflow.mMemoryCard.mSaveFileIndex >= 0) {
		mOkSectionsMask = getOkSections();
		bool res        = false;
		if (!(mOkSectionsMask & 0x1)) {
			res = true;
		}
		if (mValidOptionsCount < 1) {
			res = true;
		}
		if (mValidBlockCount < 3) {
			res = true;
		}

		return res;
	}
	return false;
}

/*
 * --INFO--
 * Address:	........
 * Size:	0000F8
 */
void MemoryCard::breakFile()
{
	static char* sectionNames[] = {
		"banner", "options 0", "options 1", "gamefile 0", "gamefile 1", "gamefile 2", "gamefile 3",
	};
	// UNUSED FUNCTION
}

/*
 * --INFO--
 * Address:	800764FC
 * Size:	00052C
 */
void MemoryCard::repairFile()
{
	(void)errCodes;

	mDidSaveFail = false;
	if (!(mOkSectionsMask & 0x1)) {
		OSCalendarTime calendar;
		OSTicksToCalendarTime(OSGetTime(), &calendar);
		char buf[36];
		STACK_PAD_VAR(1);
		sprintf(buf, "%02d/%02d %02d:%02d", calendar.mon + 1, calendar.mday, calendar.hour, calendar.min);
		memset(&cst, 0, sizeof(CARDStat));
		cst.length = ((mRequiredFreeSpace + mSectorSize - 1) / (mSectorSize)) * mSectorSize;
		initBannerArea(cst, buf);
		writeOneBanner();
	}

	if (mValidOptionsCount < 1) {
		int a = 1 - mValidOptionsCount;
		for (int i = 0; i < 2; i++) {
			if (!(mOkSectionsMask & (1 << (i + 1)))) {
				gameflow.mGamePrefs._E0 = 0;
				initOptionsArea(i);
				writeOneOption(i);
				if (!--a) {
					break;
				}
			}
		}
	}

	if (mValidBlockCount < 3) {
		int a = 3 - mValidBlockCount;
		for (int i = 0; i < 4; i++) {
			if (!(mOkSectionsMask & (1 << (i + 3)))) {
				for (int j = 0; j < 3; j++) {
					if (mValidSlots[j] == FALSE) {
						gameflow.mGamePrefs._DC = 0;
						initFileArea(j, i);
						writeOneGameFile(i);
						waitPolling();
						mValidSlots[j] = 1;
						break;
					}
				}
				if (!--a) {
					break;
				}
			}
		}
	}

	STACK_PAD_INLINE(12);
}

/*
 * --INFO--
 * Address:	80076A28
 * Size:	000040
 */
bool MemoryCard::didSaveFail()
{
	bool fail = mDidSaveFail;
	if (CARDProbe(0) == 0) {
		fail = true;
	}
	return fail;
}

/*
 * --INFO--
 * Address:	80076A68
 * Size:	000398
 */
void MemoryCard::getQuickInfos(CardQuickInfo* infos)
{
	int i;
	int c = -1;
	PlayState state;
	for (i = 0; i < 4; i++) {
		infos[i].mIndex = infos[i]._20 = -1;
	}
	for (i = 0; i < 4; i++) {
		u32 sum           = calcChecksum(getGameFilePtr(i), 0x7FF8);
		RamStream* stream = getGameFileStream(i);
		stream->setPosition(0x7FF8);
		int a = stream->readInt();
		int b = stream->readInt();
		if (b != sum) {
			gameflow.mGamePrefs.mSpareSaveGameIndex = i + 1;
		} else {
			if (a > c) {
				c = a;
			}

			RamStream* stream = getGameFileStream(i);
			state.read(*stream);
			if (a > infos[state.mSaveFlags]._20) {
				if (infos[state.mSaveFlags].mIndex != -1) {
					gameflow.mGamePrefs.mSpareSaveGameIndex = infos[state.mSaveFlags].mIndex + 1;
				}
				if (state.mSaveStatus) {
					u8 s                    = state.mSaveFlags;
					CardQuickInfo& info     = infos[s];
					info.mCrc               = sum;
					info._20                = a;
					info.mIndex             = i;
					info.mFlags             = s;
					info.mIsSelected        = state.mSaveStatus;
					info.mCurrentDay        = state.mSavedDay;
					info.mCurrentPartsCount = state.mShipPartsCount;
					info.mRedPikiCount      = state.mRedPikiCount;
					info.mYellowPikiCount   = state.mYellowPikiCount;
					info.mBluePikiCount     = state.mBluePikiCount;
				}
			} else {
				gameflow.mGamePrefs.mSpareSaveGameIndex = i + 1;
			}
		}
	}

	gameflow.mGamePrefs._DC = c + 1;

	STACK_PAD_VAR(9);
	/*
	.loc_0x0:
	  mflr      r0
	  lis       r3, 0x8022
	  stw       r0, 0x4(r1)
	  addi      r0, r3, 0x738C
	  lis       r3, 0x8022
	  stwu      r1, -0xE8(r1)
	  li        r10, 0
	  lis       r5, 0x802B
	  stmw      r17, 0xAC(r1)
	  lis       r8, 0x8022
	  lis       r7, 0x8022
	  lis       r6, 0x802A
	  lis       r20, 0x3254
	  lis       r9, 0x803B
	  addi      r30, r4, 0
	  addi      r25, r8, 0x7398
	  addi      r26, r7, 0x74C8
	  addi      r27, r6, 0x755C
	  subi      r18, r9, 0x7DA0
	  addi      r17, r20, 0x6532
	  li        r21, -0x1
	  li        r31, 0
	  li        r24, 0x6000
	  stw       r0, 0x80(r1)
	  addi      r0, r3, 0x737C
	  lis       r3, 0x802A
	  stw       r0, 0x80(r1)
	  subi      r0, r5, 0x44BC
	  lis       r5, 0x1
	  stw       r10, 0x90(r1)
	  subi      r28, r5, 0x8000
	  stw       r10, 0x8C(r1)
	  stw       r10, 0x88(r1)
	  stw       r0, 0x84(r1)
	  addi      r0, r3, 0x696C
	  lis       r3, 0x803A
	  stw       r0, 0x80(r1)
	  li        r0, 0x1
	  subi      r29, r3, 0x2848
	  stb       r10, 0xA3(r1)
	  stb       r0, 0xA0(r1)
	  li        r0, -0x1
	  stw       r0, 0x20(r4)
	  stw       r0, 0x0(r4)
	  stw       r0, 0x48(r4)
	  stw       r0, 0x28(r4)
	  stw       r0, 0x70(r4)
	  stw       r0, 0x50(r4)
	  stw       r0, 0x98(r4)
	  stw       r0, 0x78(r4)

	.loc_0xC8:
	  li        r0, 0x666
	  add       r23, r18, r24
	  mtctr     r0
	  addi      r3, r23, 0
	  addi      r19, r20, 0x6532
	  li        r12, 0

	.loc_0xE0:
	  rlwinm    r11,r12,0,24,31
	  lwz       r0, 0x0(r3)
	  addi      r6, r11, 0x1
	  rlwinm    r7,r12,24,0,7
	  rlwinm    r5,r6,16,8,15
	  subi      r8, r11, 0x1
	  or        r5, r7, r5
	  rlwinm    r7,r8,8,16,23
	  addi      r12, r12, 0x1
	  addi      r10, r11, 0x2
	  rlwinm    r11,r12,0,24,31
	  or        r4, r7, r5
	  rlwimi    r4,r10,0,24,31
	  addi      r6, r11, 0x1
	  rlwinm    r7,r12,24,0,7
	  addi      r10, r11, 0x2
	  rlwinm    r5,r6,16,8,15
	  add       r19, r19, r4
	  add       r19, r19, r0
	  lwz       r0, 0x4(r3)
	  addi      r12, r12, 0x1
	  subi      r8, r11, 0x1
	  rlwinm    r11,r12,0,24,31
	  or        r5, r7, r5
	  rlwinm    r7,r8,8,16,23
	  rlwinm    r9,r10,0,24,31
	  or        r4, r7, r5
	  addi      r6, r11, 0x1
	  rlwinm    r7,r12,24,0,7
	  rlwinm    r5,r6,16,8,15
	  or        r4, r9, r4
	  addi      r10, r11, 0x2
	  add       r19, r19, r4
	  add       r19, r19, r0
	  lwz       r0, 0x8(r3)
	  subi      r8, r11, 0x1
	  addi      r12, r12, 0x1
	  rlwinm    r11,r12,0,24,31
	  or        r5, r7, r5
	  rlwinm    r7,r8,8,16,23
	  rlwinm    r9,r10,0,24,31
	  or        r4, r7, r5
	  addi      r6, r11, 0x1
	  rlwinm    r7,r12,24,0,7
	  rlwinm    r5,r6,16,8,15
	  or        r4, r9, r4
	  add       r19, r19, r4
	  add       r19, r19, r0
	  lwz       r0, 0xC(r3)
	  subi      r8, r11, 0x1
	  or        r5, r7, r5
	  rlwinm    r7,r8,8,16,23
	  addi      r12, r12, 0x1
	  addi      r10, r11, 0x2
	  rlwinm    r11,r12,0,24,31
	  or        r4, r7, r5
	  rlwimi    r4,r10,0,24,31
	  addi      r6, r11, 0x1
	  add       r19, r19, r4
	  rlwinm    r5,r6,16,8,15
	  rlwimi    r5,r12,24,0,7
	  add       r19, r19, r0
	  lwz       r0, 0x10(r3)
	  subi      r8, r11, 0x1
	  addi      r4, r5, 0
	  addi      r10, r11, 0x2
	  rlwimi    r4,r8,8,16,23
	  rlwimi    r4,r10,0,24,31
	  add       r19, r19, r4
	  add       r19, r19, r0
	  addi      r3, r3, 0x14
	  addi      r12, r12, 0x1
	  bdnz+     .loc_0xE0
	  sub       r22, r17, r19
	  li        r3, 0x14
	  bl        -0x2FC70
	  cmplwi    r3, 0
	  beq-      .loc_0x234
	  stw       r25, 0x4(r3)
	  li        r0, 0
	  stw       r26, 0x4(r3)
	  stw       r27, 0x4(r3)
	  stw       r23, 0x8(r3)
	  stw       r0, 0xC(r3)
	  stw       r28, 0x10(r3)

	.loc_0x234:
	  mr        r19, r3
	  lwz       r12, 0x4(r19)
	  li        r4, 0x7FF8
	  lwz       r12, 0x5C(r12)
	  mtlr      r12
	  blrl
	  mr        r3, r19
	  lwz       r12, 0x4(r19)
	  lwz       r12, 0x8(r12)
	  mtlr      r12
	  blrl
	  addi      r0, r3, 0
	  addi      r3, r19, 0
	  lwz       r12, 0x4(r19)
	  mr        r19, r0
	  lwz       r12, 0x8(r12)
	  mtlr      r12
	  blrl
	  cmplw     r3, r22
	  beq-      .loc_0x290
	  addi      r0, r31, 0x1
	  stb       r0, 0xB5(r29)
	  b         .loc_0x360

	.loc_0x290:
	  cmpw      r19, r21
	  ble-      .loc_0x29C
	  mr        r21, r19

	.loc_0x29C:
	  li        r3, 0x14
	  bl        -0x2FD04
	  cmplwi    r3, 0
	  beq-      .loc_0x2C8
	  stw       r25, 0x4(r3)
	  li        r0, 0
	  stw       r26, 0x4(r3)
	  stw       r27, 0x4(r3)
	  stw       r23, 0x8(r3)
	  stw       r0, 0xC(r3)
	  stw       r28, 0x10(r3)

	.loc_0x2C8:
	  addi      r4, r3, 0
	  addi      r3, r1, 0x80
	  bl        -0x222F8
	  lbz       r4, 0xA3(r1)
	  mulli     r0, r4, 0x28
	  add       r3, r30, r0
	  lwz       r0, 0x20(r3)
	  cmpw      r19, r0
	  ble-      .loc_0x358
	  lwz       r3, 0x0(r3)
	  cmpwi     r3, -0x1
	  beq-      .loc_0x300
	  addi      r0, r3, 0x1
	  stb       r0, 0xB5(r29)

	.loc_0x300:
	  lbz       r0, 0xA0(r1)
	  cmplwi    r0, 0
	  beq-      .loc_0x360
	  mulli     r0, r4, 0x28
	  add       r3, r30, r0
	  stw       r22, 0x24(r3)
	  stw       r19, 0x20(r3)
	  stw       r31, 0x0(r3)
	  stw       r4, 0x4(r3)
	  lbz       r0, 0xA0(r1)
	  stw       r0, 0x8(r3)
	  lbz       r0, 0xA1(r1)
	  stw       r0, 0xC(r3)
	  lbz       r0, 0xA2(r1)
	  stw       r0, 0x10(r3)
	  lwz       r0, 0x94(r1)
	  stw       r0, 0x14(r3)
	  lwz       r0, 0x98(r1)
	  stw       r0, 0x18(r3)
	  lwz       r0, 0x9C(r1)
	  stw       r0, 0x1C(r3)
	  b         .loc_0x360

	.loc_0x358:
	  addi      r0, r31, 0x1
	  stb       r0, 0xB5(r29)

	.loc_0x360:
	  addi      r31, r31, 0x1
	  cmpwi     r31, 0x4
	  addis     r24, r24, 0x1
	  subi      r24, r24, 0x8000
	  blt+      .loc_0xC8
	  lis       r3, 0x803A
	  addi      r0, r21, 0x1
	  subi      r3, r3, 0x2848
	  stw       r0, 0x170(r3)
	  lwz       r0, 0xEC(r1)
	  lmw       r17, 0xAC(r1)
	  addi      r1, r1, 0xE8
	  mtlr      r0
	  blr
	*/
}

/*
 * --INFO--
 * Address:	80076E00
 * Size:	000034
 */
void MemoryCard::init()
{
	CardUtilInit(&CardStack[0x2000], 0x2000, 0xe);
}

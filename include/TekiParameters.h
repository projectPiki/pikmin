#ifndef _TEKIPARAMETERS_H
#define _TEKIPARAMETERS_H

#include "ID32.h"
#include "Node.h"
#include "ParaParameters.h"
#include "types.h"

// Descriptions from code use and from Minty Meeo's notes.

/**
 * @brief TODO
 */
enum TekiFloatParams {
	TPF_Life                     = 0, // Max health
	TPF_Scale                    = 1, // Size of teki
	TPF_Weight                   = 2,
	TPF_WalkVelocity             = 3,
	TPF_RunVelocity              = 4,  // speed of teki in pursuit of attention node
	TPF_TurnVelocity             = 5,  // speed of teki pivoting
	TPF_VisibleRange             = 6,  // depth of view to pursue a target
	TPF_VisibleAngle             = 7,  // field of view to pursue a target
	TPF_AttackableRange          = 8,  // depth of view to perform an attack
	TPF_AttackableAngle          = 9,  // field of view to perform an attack
	TPF_AttackRange              = 10, // radius of attack hitbox
	TPF_AttackHitRange           = 11,
	TPF_AttackPower              = 12, // damage dealt by attack
	TPF_AttackWaitPeriod         = 13, // time between attack actions
	TPF_UnguardedPeriod          = 14,
	TPF_DangerTerritoryRange     = 15,
	TPF_SafetyTerritoryRange     = 16,
	TPF_LifeGaugeOffset          = 17, // vertical offset of life gauge
	TPF_ShadowSize               = 18, // scale of teki shadow
	TPF_RippleScale              = 19, // scale of water ripples generated by teki
	TPF_CorpseSize               = 20, // radius pikis grab corpse pellet at
	TPF_CorpseHeight             = 21,
	TPF_SpawnDistance            = 22, // horizontal distance to add to tekis birthed by teki
	TPF_SpawnHeight              = 23, // vertical distance to add to tekis birthed by teki
	TPF_SpawnVelocity            = 24, // speed of birthed tekis
	TPF_LifePeriod               = 25, // timer until death
	TPF_MessageRange             = 26, // radius in which, when other specific tekis enter it, teki will call for help
	TPF_WarnPeriod               = 27,
	TPF_VisibleHeight            = 28,
	TPF_FlightHeight             = 29, // if teki flies, height above ground teki will fly at
	TPF_DamageMotionPeriod       = 30, // time spent doing a single jiggle from damage
	TPF_DamageMotionAmplitude    = 31, // intensity of jiggle from damage
	TPF_FlickProbability         = 32, // if teki flicks, probability a piki will be flicked off
	TPF_UpperFlickPower          = 33, //
	TPF_LowerFlickPower          = 34,
	TPF_UpperAttackPower         = 35,
	TPF_LowerAttackPower         = 36,
	TPF_LifeRecoverRate          = 37, // health regeneration rate
	TPF_TraceAngle               = 38, // field of view in which teki will pursue you without pivoting in place
	TPF_SpawnPelletVelocityHoriz = 39, // dropped pellet horizontal spawn speed
	TPF_SpawnPelletVelocityVert  = 40, // dropped pellet vertical spawn speed
	TPF_CorpseVelocityHoriz      = 41, // corpse horizontal spawn speed
	TPF_CorpseVelocityVert       = 42, // corpse vertical spawn speed
	TPF_BombDamageRate           = 43, // bomb rock damage multiplier
	TPF_CollisionRadius          = 44,
	TPF_LowerRange               = 45,
	TPF_RESERVED4                = 46,
	TPF_RESERVED3                = 47,
	TPF_RESERVED2                = 48,
	TPF_RESERVED1                = 49,
	TPF_COUNT, // 50
};

/**
 * @brief TODO
 */
enum TekiIntParams {
	TPI_CorpseType          = 0, // 0 = no corpse, 1 = corpse
	TPI_ShadowType          = 1,
	TPI_CullingType         = 2, // 0 = cull AI when off camera, 1 = do not cull AI
	TPI_SpawnType           = 3, // type of additional object spawned by enemy, see TekiTypes enum
	TPI_SpawnCount          = 4,
	TPI_AnimationType       = 5,
	TPI_CarcassSize         = 6,
	TPI_ModelType           = 7,
	TPI_LightType           = 8,
	TPI_SwallowCount        = 9, // max number of pikis eaten by swallow action
	TPI_FlickPikiCount1     = 10,
	TPI_FlickPikiCount2     = 11,
	TPI_FlickPikiCount3     = 12,
	TPI_FlickDamageCount1   = 13,
	TPI_FlickDamageCount2   = 14,
	TPI_FlickDamageCount3   = 15,
	TPI_FlickDamageCount4   = 16,
	TPI_SpawnPelletScaleOff = 17,
	TPI_SpawnPelletForward  = 18,
	TPI_RESERVED1           = 19,
	TPI_COUNT, // 20
};

/**
 * @brief TODO
 */
enum TekiCullingType {
	CULLAI_CullAIOffCamera = 0, // cull AI when off camera
	CULLAI_NeverCullAI     = 1, // do not cull AI
};

/**
 * @brief TODO
 */
enum TekiCorpseType {
	TEKICORPSE_NoCorpse    = 0, // leave no corpse when dead
	TEKICORPSE_LeaveCorpse = 1, // leave a corpse when dead
};

/**
 * @brief TODO
 *
 * @note Size: 0x88.
 */
struct TekiParameters : public Node {
	TekiParameters(int iParamNum, int fParamNum);

	virtual void read(RandomAccessStream&); // _0C

	f32 getF(int idx) { return mParameters->getF(idx); } // weak, see TekiFloatParams enum
	int getI(int idx) { return mParameters->getI(idx); } // fabricated, see TekiIntParams enum

	// _00     = VTBL
	// _00-_20 = Node
	int mVersion;                     // _20
	ID32 mParaIDs[8];                 // _24
	ParaMultiParameters* mParameters; // _84
};

#endif
